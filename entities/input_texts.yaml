

# text input homeassistant entities

# Cultivar name
cultivar_name:
  name: Cultivar Name
  initial: "Cultivar 1"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

# Cultivar Breeder
cultivar_breeder:
  name: Cultivar Breeder
  initial: "Breeder Name"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

# Remarks
remarks:
  name: Remarks
  initial: "Remarks"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

# Medium
medium:
  name: Medium
  initial: "Medium"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

# Light
light:
  name: Light
  initial: "Light"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

# Nutrients
nutrients:
  name: Nutrients
  initial: "Nutrients"
  mode: box
  icon: mdi:flower
  unit_of_measurement: ""
  min: 0
  max: 0
  step: 0

### DEVICES

# the concept is to use input helpers, like this:
# 1. Using input_* Helpers for Global Variables
# One of the most common ways to handle reusable values (that act like global variables) in Home Assistant is to define them as input_* helpers (input_boolean, input_number, input_text). Once defined, these are accessible globally, and you can update or use them in automations and scripts.

# For example, letâ€™s map device entities to input_text variables:

# yaml
# Copy code
# input_text:
#   living_room_light:
#     name: Living Room Light
#   bedroom_light:
#     name: Bedroom Light
# You can then use these input_text helpers in your automations or scripts to refer to the entity names globally:

# yaml
# Copy code
# automation:
#   - alias: Turn On Light Based on Variable
#     trigger:
#       - platform: state
#         entity_id: input_boolean.some_trigger
#         to: 'on'
#     action:
#       - service: light.turn_on
#         target:
#           entity_id: "{{ states('input_text.living_room_light') }}"
# In this case, you could store the entity ID of a physical device (like a light) in input_text.living_room_light and use it globally across automations.


# input_text: will be added in the configuration.yaml file with the include directive
# cola_detection_distance_sensor:
cola_detection_distance:
  name: Cola Detection Distance
  initial: "sensor.esp1_g1_light_distance_sensor"

canopy_camera:
  name: Canopy Camera
  initial: "camera.g1_cam_my_camera"

canopy_illumination:
  name: Canopy Illumination
  initial: "sensor.g1_canopy_g1_bh1750_illuminance"

canopy_temperature:
  name: Canopy Temperature
  initial: "sensor.g1_canopy_canopy_temperature"

canopy_humidity:
  name: Canopy Humidity
  initial: "sensor.g1_canopy_canopy_humidity"

intake_temperature:
  name: Intake Temperature Sensor
  initial: "sensor.esp1_g1_intake_temperature"

intake_humidity:
  name: Intake Humidity Sensor
  initial: "sensor.esp1_g1_intake_humidity"

intake_fan:
  name: Intake Fan
  initial: "fan.g1_intake_intake_fan"

exhaust_fan_1:
  name: Exhaust Fan 1
  initial: "fan.g1_exhaust_exhaust_fan_1"

exhaust_fan_2:
  name: Exhaust Fan 2
  initial: "fan.g1_exhaust_exhaust_fan_2"

wind_fan_1:
  name: Wind Fan 1
  initial: "fan.g1_wind_wind_fan_1"

wind_fan_2:
  name: Wind Fan 2
  initial: "fan.g1_wind_wind_fan_2"

humidifier:
  name: Humidifier
  initial: "fan.g1_humidifier_humidifier"

light_1:
  name: Light 1
  initial: "light.g1_qbar1_pwm_qbar1"

light_2:
  name: Light 2
  initial: "light.g1_qbar2_pwm_qbar2"

gantry_height:
  name: Gantry Height
  initial: "sensor.g1_qbar1_ultrasonic_sensor" 

door_switch:
  name: Door Switch
  initial: "binary_sensor.g1_water_door_switch"

irrigation_pump:
  name: Irrigation Pump
  initial: "switch.g1_water_irrigation_pump_1"

circulation_pump:
  name: Circulation Pump
  initial: "switch.g1_water_circulation_pump_1" 