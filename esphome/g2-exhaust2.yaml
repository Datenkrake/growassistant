esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "Cei7W3tXSTZCJ1gwmfn9LsVYXQ2svBA00NYav8NneBQ="

ota:
  - platform: esphome
    password: "55b5d1d47796c765a604a0f7168bbc2d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "G2-Exhaust2 Fallback Hotspot"
    password: "PVElaoAOyKbo"

captive_portal:

esphome:
  name: g2-exhaust2

####################################################################
# configure substitutions and friendly name
####################################################################

  friendly_name: ${area_id}_${device_id}${suffix}

substitutions:
  area_id: G2
  device_id: "EXHAUST"
  suffix: "_B"
  #pin_sda: GPIO3
  #pin_scl: GPIO4
  pin_fan1_pwm: GPIO5
  pin_fan2_pwm: GPIO6
  #address_bme680: "0x77"
  #bme680_temp_offset: "2.5"
  fan1_max: "1.0"
  fan2_max: "1.0"


####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

globals:
  - id: ${area_id}_${device_id}${suffix}_fan1_pwm_value
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: ${area_id}_${device_id}${suffix}_door_open
    type: bool
    restore_value: no
    initial_value: 'false'

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "${area_id}/exhaust"
  on_message:
    - topic: ${area_id}/door_switch
      then:
        - lambda: |-
            if (strcmp(x.c_str(), "ON") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open) = true;
            } else if (strcmp(x.c_str(), "OFF") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open) = false;
            }
            id(update_exhaust_fan_speed).execute();

output:
  - platform: ledc
    pin: ${pin_fan1_pwm}
    id: ${area_id}_${device_id}${suffix}_fan1_pwm
    frequency: 15000 Hz
    inverted: True
    max_power: 0.8

  - platform: ledc
    pin: ${pin_fan2_pwm}
    id: ${area_id}_${device_id}${suffix}_fan2_pwm
    frequency: 15000 Hz
    inverted: True
    max_power: 0.5

fan:
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan1_pwm
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_fan1
    state_topic: "${area_id}/${device_id}/fan/state"
    speed_state_topic: "${area_id}/${device_id}/fan/speed"
    command_topic: "${area_id}/${device_id}/fan/set-state"
    speed_command_topic: "${area_id}/${device_id}/fan/set-speed"
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan2_pwm
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_fan2
    state_topic: "${area_id}/${device_id}/fan/state"
    speed_state_topic: "${area_id}/${device_id}/fan/speed"
    command_topic: "${area_id}/${device_id}/fan/set-state"
    speed_command_topic: "${area_id}/${device_id}/fan/set-speed"
    
i2c:
  !include includes/i2c_bus_a.yaml
bme68x_bsec2_i2c:
  !include includes/bme680x_bsec2_i2c.yaml
  
sensor:
  # physical sensors
  - !include includes/sensor_bme68x_bsec2.yaml
  #calculated sensors
  - !include includes/sensor_vpd.yaml
  - !include includes/sensor_dew_point.yaml
# MQTT Sensors
  - !include includes/sensor_mqtt_temperature_max.yaml
  - !include includes/sensor_mqtt_canopy_rh_target.yaml
  - !include includes/sensor_mqtt_canopy_humidity.yaml
  - !include includes/sensor_mqtt_canopy_temperature.yaml
  - !include includes/sensor_mqtt_gantry_rh_target.yaml
  - !include includes/sensor_mqtt_gantry_humidity.yaml
  - !include includes/sensor_mqtt_gantry_temperature.yaml

number:
  - !include includes/number_fan_speed_min.yaml
  - !include includes/number_fan_speed_max.yaml

interval:
  - interval: 10s
    then:
      - script.execute: update_exhaust_fan_speed

script:
  - !include includes/script_update_exhaust_fan_speed.yaml


####################################################################
# generic yaml for humidifiers below
####################################################################
    
globals:
  - id: ${area_id}_fan1_pwm_value${suffix}
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: ${area_id}_door_open${suffix}
    type: bool
    restore_value: no
    initial_value: 'false'

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "${area_id}/exhaust"
  on_message:
    - topic: ${area_id}/door_switch
      then:
        - lambda: |-
            if (strcmp(x.c_str(), "ON") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open${suffix}) = true;
            } else if (strcmp(x.c_str(), "OFF") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open${suffix}) = false;
            }
            id(update_fan_speed).execute();

output:
  - platform: ledc
    pin: ${pin_fan1_pwm}
    id: ${area_id}_fan1_pwm${suffix}
    frequency: 25000 Hz
    inverted: True
    max_power: ${fan1_max}

  - platform: ledc
    pin: ${pin_fan2_pwm}
    id: ${area_id}_fan2_pwm${suffix}
    frequency: 25000 Hz
    inverted: True
    max_power: ${fan2_max}

fan:
  - platform: speed
    output: ${area_id}_fan1_pwm${suffix}
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_exhaust_fan1${suffix}
    state_topic: "${area_id}/exhaust/fan/state"
    speed_state_topic: "${area_id}/exhaust/fan/speed"
    command_topic: "${area_id}/exhaust/fan/set-state"
    speed_command_topic: "${area_id}/exhaust/fan/set-speed"
  - platform: speed
    output: ${area_id}_fan2_pwm${suffix}
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_exhaust_fan2${suffix}
    state_topic: "${area_id}/exhaust/fan/state"
    speed_state_topic: "${area_id}/exhaust/fan/speed"
    command_topic: "${area_id}/exhaust/fan/set-state"
    speed_command_topic: "${area_id}/exhaust/fan/set-speed"
    
# MQTT Sensors
sensor:
  # - platform: bme68x_bsec2
  #   temperature:
  #     name: "Canopy Temperature"
  #     id: ${area_id}_canopy_temperature
  #     state_topic: "${area_id}/temperature/canopy"
  #   pressure:
  #     name: "Canopy Pressure"
  #     id: ${area_id}_canopy_pressure
  #     state_topic: "${area_id}/pressure/canopy"
  #   humidity:
  #     name: "Canopy Humidity"
  #     id: ${area_id}_canopy_humidity
  #     state_topic: "${area_id}/humidity/canopy"
  #   iaq:
  #     name: "Canopy IAQ"
  #     id: ${area_id}_canopy_iaq
  #     state_topic: "${area_id}/iaq/canopy"
  #   co2_equivalent:
  #     name: "Canopy CO2e"
  #     id: ${area_id}_canopy_co2e
  #     state_topic: "${area_id}/co2e/canopy"
  #   breath_voc_equivalent:
  #     name: "Canopy bVOCe"
  #     id: ${area_id}_canopy_voce
  #     state_topic: "${area_id}/bvoce/canopy"

  - platform: mqtt_subscribe
    name: "Temperature Max [${area_id}${suffix}]"
    id: ${area_id}_exhaust_temperature_max
    topic: "${area_id}/temperature_max"

  - platform: mqtt_subscribe
    name: "Canopy VPD Target [${area_id}${suffix}]"
    id: ${area_id}_exhaust_vpd_target
    topic: "${area_id}/vpd_target/canopy"

  - platform: mqtt_subscribe
    name: "Canopy VPD [${area_id}${suffix}]"
    id: ${area_id}_exhaust_canopy_vpd
    topic: "${area_id}/vpd/canopy"

  - platform: mqtt_subscribe
    name: "Canopy RH Target [${area_id}${suffix}]"
    id: ${area_id}_exhaust_canopy_rh_target
    topic: "${area_id}/rh_target/canopy"

  - platform: mqtt_subscribe
    name: "Canopy Humidity [${area_id}${suffix}]"
    id: ${area_id}_exhaust_canopy_humidity
    topic: "${area_id}/humidity/canopy"

  - platform: mqtt_subscribe
    name: "Canopy Temperature [${area_id}${suffix}]"
    id: ${area_id}_exhaust_canopy_temperature
    topic: "${area_id}/temperature/canopy"

  - platform: mqtt_subscribe
    name: "Gantry VPD [${area_id}${suffix}]"
    id: ${area_id}_exhaust_gantry_vpd
    topic: "${area_id}/vpd/gantry"

  - platform: mqtt_subscribe
    name: "Gantry RH Target [${area_id}${suffix}]"
    id: ${area_id}_exhaust_gantry_rh_target
    topic: "${area_id}/rh_target/gantry"

  - platform: mqtt_subscribe
    name: "Gantry Humidity [${area_id}${suffix}]"
    id: ${area_id}_exhaust_gantry_humidity
    topic: "${area_id}/humidity/gantry"

  - platform: mqtt_subscribe
    name: "Gantry Temperature [${area_id}${suffix}]"
    id: ${area_id}_exhaust_gantry_temperature
    topic: "${area_id}/temperature/gantry"

number:
  - platform: template
    name: "Exhaust Fan Speed Min [${area_id}${suffix}]"
    id: ${area_id}_exhaust_fan_speed_min
    state_topic: "${area_id}/exhaust_fan_speed_min"
    command_topic: "${area_id}/exhaust_fan_speed_min/set-state"
    optimistic: True
    initial_value: 0.0
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    mode: box 
    unit_of_measurement: "%"
    retain: True
    restore_value: True

  - platform: template
    name: "Exhaust Fan Speed Max [${area_id}${suffix}]"
    id: ${area_id}_exhaust_fan_speed_max
    state_topic: "${area_id}/exhaust_fan_speed_max"
    command_topic: "${area_id}/exhaust_fan_speed_max/set-state"
    optimistic: True
    initial_value: 60.0
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    mode: box 
    unit_of_measurement: "%"
    retain: True
    restore_value: True

interval:
  - interval: 60s
    then:
      - script.execute: update_fan_speed

script:
  - id: update_fan_speed
    then:
      lambda: |-
        // Check if the door is open
        if (id(${area_id}_door_open${suffix})) {
          // Door is open; turn off both fans
          //id(${area_id}_fan1_pwm${suffix}).set_level(0.0);
          //id(${area_id}_fan2_pwm${suffix}).set_level(0.0);
          //id(${area_id}_fan1_pwm_value${suffix}) = 0.0;
          auto call3 = id(${area_id}_exhaust_fan1${suffix}).turn_off();
          call3.perform();
          auto call4 = id(${area_id}_exhaust_fan2${suffix}).turn_off();
          call4.perform();
          ESP_LOGD("fan", "Door is open. Turning off fans.");
          return;
        }

        auto call1 = id(${area_id}_exhaust_fan1${suffix}).turn_on();
        call1.perform();
        auto call2 = id(${area_id}_exhaust_fan2${suffix}).turn_on();
        call2.perform();

        // Door is closed; proceed with fan speed adjustments
        // Default to gantry data
        float temperature = id(${area_id}_exhaust_canopy_temperature).state;
        float humidity = id(${area_id}_exhaust_canopy_humidity).state;
        float rh_target = id(${area_id}_exhaust_canopy_rh_target).state;

        // Use canopy data if available
        if (!isnan(id(${area_id}_exhaust_gantry_temperature).state)) {
          temperature = id(${area_id}_exhaust_gantry_temperature).state;
        }
        if (!isnan(id(${area_id}_exhaust_canopy_humidity).state)) {
          humidity = id(${area_id}_exhaust_gantry_humidity).state;
        }
        if (!isnan(id(${area_id}_exhaust_gantry_rh_target).state)) {
          rh_target = id(${area_id}_exhaust_gantry_rh_target).state;
        }

        // Get temperature max value
        float _temperature_max = id(${area_id}_exhaust_temperature_max).state;

        // Adjust fan speed based on conditions
        float fan_value = id(${area_id}_fan1_pwm_value${suffix});

        // If temperature exceeds temperature max, increase fan speed
        if (temperature > _temperature_max) {
          fan_value += 1.0;
        }

        // If humidity exceeds rh_target, increase fan speed, else decrease fan speed
        if (humidity > rh_target) {
          fan_value += 1.0;
        } else {
          fan_value -= 2.0;
        }

        // Retrieve min and max fan speeds
        float fan_min = id(${area_id}_exhaust_fan_speed_min).state;
        float fan_max = id(${area_id}_exhaust_fan_speed_max).state;

        // Clamp the fan value between min and max
        fan_value = fmax(fan_min, fmin(fan_max, fan_value));

        // Update the global fan speed value
        id(${area_id}_fan1_pwm_value${suffix}) = fan_value;

        // Set the fan speed to both fans
        //id(${area_id}_fan1_pwm${suffix}).set_level(fan_value / 100.0);
        //id(${area_id}_fan2_pwm${suffix}).set_level(fan_value / 100.0);

        id(${area_id}_exhaust_fan1${suffix}).speed = fan_value;
        id(${area_id}_exhaust_fan2${suffix}).speed = fan_value;

        ESP_LOGD("fan", "Updating fan speed to %.2f%% (Min: %.2f%%, Max: %.2f%%)", fan_value, fan_min, fan_max);

