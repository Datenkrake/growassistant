esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable Home Assistant API
# api:
#   encryption:
#     key: "0pZoQWsj+fxA7UH5h8wWRvYo4CBaYNvgLR2B4o4s7wI="

ota:
  - platform: esphome
    password: "5157826e92224d258b36f366a1b17de1"
    
esphome:
  name: g1-qbar1

####################################################################
# configure substitutions and friendly name
####################################################################

  area: ${area_id}
  friendly_name: ${area_id}_${device_id}${suffix}

# Note for pinout on ESP32-C3 Supermini:
# Pin Functions
# GPIO0 / A0 (bottom right corner in top view with USB port on the top)
# GPIO1 / A1
# GPIO2 / A2 (external pull-up resistor and is a boot related pin)
# GPIO3 / A3
# GPIO4 / A4 / SCK
# GPIO5 / A5 / MISO
# GPIO6 / MOSI
# GPIO7 / SS
# GPIO8 / SDA
# GPIO9 / SCL (external pull-down resistor and is a boot related pin "BOOT button")
# GPIO10
# GPIO20 / RX
# GPIO21 / TX

substitutions:
  area_id: G1
  device_id: "QBAR"
  suffix: "_A"
  pin_light_pwm: GPIO8
  pin_trigger: GPIO9
  pin_echo: GPIO10

####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "auto/${area_id}/${device_id}"
  log_topic: "debug/${area_id}/${device_id}"

# PWM controlled LED on GPIO8
output:
  - platform: ledc
    pin: ${pin_light_pwm}
    id: ${area_id}_led_pwm${suffix}
    frequency: 100 Hz 
    max_power: 0.95

number:
  - !include includes/number_gantry_position_min.yaml
  - !include includes/number_gantry_position_max.yaml
  - !include includes/number_gantry_position_target.yaml

# Ultrasonic sensor on GPIO9 (TRIG) and GPIO10 (ECHO)
sensor:
  - !include includes/sensor_gantry_ultrasonic.yaml
  - !include includes/sensor_full_spectrum_brightness.yaml

text_sensor:
  - !include includes/text_sensor_mqtt_cola_detected.yaml
  - !include includes/text_sensor_mqtt_full_spectrum_brightness_json_shelly_dimmer.yaml

# Automation to move gantry up when conditions are met
interval:
  - interval: 60min
    then:
      - lambda: |-
          // if cola is detected, set the target position to position - 0.01
          if (id(${area_id}_${device_id}${suffix}_cola_detected).state == "ON") {
            id(${area_id}_${device_id}${suffix}_position_target).publish_state(id(${area_id}_${device_id}${suffix}_position).state - 0.01);
          }

# Example rest_move_up script
script:
  - id: ${area_id}_rest_move_up
    then:
      - http_request.get:
          url: "http://g1.local:7125/printer/gcode/script?script=move_light%20DISTANCE=10"
  - id: ${area_id}_rest_move_down
    then:
      - http_request.get:
          url: "http://g1.local:7125/printer/gcode/script?script=move_light%20DISTANCE=-10"
  - id: ${area_id}_gantry_move
    then:
      - lambda: |-
          // The rest command controls a 3d printer board using klipper. it acn only do moves up to 99 steps (1 step equals 1mm). The gantry position sensor is filtered as shown below. 
          // A move distance shall be determined and executed in multiple rest commands of up to 99 steps and a configurable delay in seconds between the commands to avoid overloading the klipper board.
          // The minimum position is the position where the gantry is at the top.
          // The position sensor looks up, therefore the moves are inverted. A negative move is a down move but increases the position value.
          // The move distance is limited to 99 steps to avoid overloading the klipper board.
          // The delay between the rest commands is set to 5 second to avoid overloading the klipper board.
          // If the gantry is at the top, the move distance is set to 0 and no rest command is executed. Position < min or position > max is possible due to sensor noise.
          // If the sensor is below the min value, only negative moves are possible. If the sensor is above the max value, only positive moves are possible.
          
          ESP_LOGD("debug", "Checking conditions for moving gantry...");
          ESP_LOGD("debug", "Cola detected state: %s", id(${area_id}_${device_id}${suffix}_cola_detected).state.c_str());
          ESP_LOGD("debug", "Gantry position: %.2f, Min Position: %.2f", id(${area_id}_${device_id}${suffix}_position).state, id(${area_id}_${device_id}${suffix}_position_min).state);

          // if ${area_id}_${device_id}${suffix}_position_target is difference than ${area_id}_${device_id}${suffix}_position, move the gantry
          // the difference needs to be larger, ir smaller, than plus, or minus, 0.01, depending on the direction of the move to account for sensor noise
          // it also needs to be within the min and max values
          if (id(${area_id}_${device_id}${suffix}_position_target).state > id(${area_id}_${device_id}${suffix}_position).state + 0.01 && id(${area_id}_${device_id}${suffix}_position).state <= id(${area_id}_${device_id}${suffix}_position_max).state) {
            ESP_LOGD("main", "Conditions met. Calling REST endpoint to move gantry up");
            id(${area_id}_rest_move_up).execute();
          } else if (id(${area_id}_${device_id}${suffix}_position_target).state < id(${area_id}_${device_id}${suffix}_position).state - 0.01 && id(${area_id}_${device_id}${suffix}_position).state >= id(${area_id}_${device_id}${suffix}_position_min).state) {
            ESP_LOGD("main", "Conditions met. Calling REST endpoint to move gantry down");
            id(${area_id}_rest_move_down).execute();
          } else {
            ESP_LOGD("main", "Conditions not met. Skipping...");
          }
          // if the move condition is still met, call trigger_gantry_move
          if (id(${area_id}_${device_id}${suffix}_position_target).state > id(${area_id}_${device_id}${suffix}_position).state + 0.01 || id(${area_id}_${device_id}${suffix}_position_target).state < id(${area_id}_${device_id}${suffix}_position).state - 0.01) {
            id(${area_id}_trigger_gantry_move).execute();
          }
          
  - id: ${area_id}_trigger_gantry_move
    then:
      - delay: 5s
      - script.execute: ${area_id}_gantry_move


# Include the HTTP Request component
http_request:
  verify_ssl: false
  useragent: esphome/device