esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable Home Assistant API
# api:
#   encryption:
#     key: "0pZoQWsj+fxA7UH5h8wWRvYo4CBaYNvgLR2B4o4s7wI="

ota:
  - platform: esphome
    password: "5157826e92224d258b36f366a1b17de1"
    
esphome:
  name: g1-qbar1

####################################################################
# configure substitutions and friendly name
####################################################################

  area: ${area_id}
  friendly_name: ${area_id}_${device_id}${suffix}

substitutions:
  area_id: G1
  device_id: "QBAR"
  suffix: "_A"
  pin_light_pwm: GPIO8
  pin_trigger: GPIO9
  pin_echo: GPIO10

####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "auto/${area_id}/${device_id}"
  log_topic: "debug/${area_id}/${device_id}"

# PWM controlled LED on GPIO8
output:
  - platform: ledc
    pin: ${pin_light_pwm}
    id: ${area_id}_led_pwm${suffix}
    frequency: 100 Hz 
    max_power: 0.95

light:
  - platform: monochromatic
    output: ${area_id}_led_pwm${suffix}
    name: "Full Spectrum [${area_id}${suffix}]"
    state_topic: "${area_id}/full_spectrum/state/${device_id}"
    command_topic: "${area_id}/full_spectrum/state/${device_id}/set"

number:
  - !include includes/number_gantry_position_min.yaml
  - !include includes/number_gantry_position_max.yaml

# Ultrasonic sensor on GPIO9 (TRIG) and GPIO10 (ECHO)
sensor:
  - !include includes/sensor_gantry_ultrasonic.yaml

text_sensor:
  - !include includes/text_sensor_mqtt_cola_detected.yaml

interval:
  - interval: 60s
    then:
      - lambda: |-
          ESP_LOGD("debug", "Checking conditions for moving gantry...");
          ESP_LOGD("debug", "Cola detected state: %s", id(${area_id}_${device_id}${suffix}_cola_detected).state.c_str());
          ESP_LOGD("debug", "Gantry position: %.2f, Min Position: %.2f", id(${area_id}_${device_id}${suffix}_position).state, id(${area_id}_${device_id}${suffix}_position_min).state);

          if (id(${area_id}_${device_id}${suffix}_cola_detected).state == "true" && id(${area_id}_${device_id}${suffix}_position).state > id(${area_id}_${device_id}${suffix}_position_min).state) {
            ESP_LOGD("main", "Conditions met. Calling REST endpoint to move gantry");
            id(${area_id}_rest_move_up).execute();
          } else {
            ESP_LOGD("main", "Conditions not met. Skipping...");
          }

# Example rest_move_up script
script:
  - id: ${area_id}_rest_move_up
    then:
      - http_request.get:
          url: "http://g1.local:7125/printer/gcode/script?script=move_light%20DISTANCE=10"

# Include the HTTP Request component
http_request:
  verify_ssl: false
  useragent: esphome/device