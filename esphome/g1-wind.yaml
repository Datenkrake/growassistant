esphome:
  name: g1-wind
  friendly_name: G1_GANTRY

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "qwHe3/tI5GAL34g4BySb8Mvzv26WNyzSsgS18Dx/oH0="

ota:
  - platform: esphome
    password: "0b45c8de2cc7e8951f42ac3bdaa7e4f6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "G1-Wind Fallback Hotspot"
    password: "G7vV59YrOf0x"

captive_portal:
    
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "g1/gantry"

output:
  - platform: ledc
    pin: GPIO7
    id: fan1_pwm
    frequency: 15000 Hz
    inverted: True

  - platform: ledc
    pin: GPIO8
    id: fan2_pwm
    frequency: 15000 Hz
    inverted: True

fan:
  - platform: speed
    output: fan1_pwm
    name: "Wind"
  - platform: speed
    output: fan2_pwm
    name: "Wind"

  # Example configuration entry for ESP32
i2c:
  sda: 21
  scl: 20
  scan: true
  id: bus_a

# Example configuration entry
sensor:
  - platform: sgp4x
    voc:
      name: "VOC Index"
    nox:
      name: "NOx Index"
    compensation:
      humidity_source: humidity
      temperature_source: temperature
    address: 0x59
    update_interval: 60s
    i2c_id: bus_a

  - platform: htu21d
    model: htu21d
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity  
    heater:
      name: "Heater"

  - platform: template
    name: "VPD Sensor"
    unit_of_measurement: "kPa"
    update_interval: 30s
    lambda: |
      float temp = id(temperature).state;
      float rh = id(humidity).state;
      float leaf_offset = id(vpd_leaf_offset).state;
      float LT = temp + leaf_offset;
      float ASVP = 610.78 * exp((temp / (temp + 237.3)) * 17.2694);
      float LSVP = 610.78 * exp((LT / (LT + 237.3)) * 17.2694);
      float LVPD = (LSVP - (ASVP * (rh / 100.0))) / 1000.0;
      return roundf(LVPD * 100.0) / 100.0;

  - platform: template
    name: "RH Target"
    unit_of_measurement: "%"
    update_interval: 30s
    lambda: |
      float T = id(temperature).state;
      float LT = T - 2.0;
      float ASVP = 610.78 * pow(2.71828, (T / (T + 237.3)) * 17.2694);
      float LSVP = 610.78 * pow(2.71828, (LT / (LT + 237.3)) * 17.2694);
      float LVPD_TARGET = id(vpd_target).state;
      float RH_TARGET = (LSVP - LVPD_TARGET * 1000) / ASVP * 100;
      return roundf(RH_TARGET * 10.0) / 10.0;

  - platform: template
    name: "Dew Point"
    unit_of_measurement: "Â°C"
    update_interval: 30s
    lambda: |
      float T = id(temperature).state;
      float RH = id(humidity).state;
      float a = 17.27;
      float b = 237.7;
      float alpha = ((a * T) / (b + T)) + log(RH / 100.0);
      float dew_point = (b * alpha) / (a - alpha);
      return roundf(dew_point * 10.0) / 10.0;

  - platform: mqtt_subscribe
    topic: "g1/config/vpd_leaf_offset"
    name: "VPD Leaf Offset"
    id: vpd_leaf_offset

  - platform: mqtt_subscribe
    topic: "g1/config/vpd_target"
    name: "VPD Target"
    id: vpd_target

# number:
#   - platform: template
#     name: "Leaf Offset"
#     id: vpd_leaf_offset
#     optimistic: true
#     initial_value: 0.0
#     min_value: -10.0
#     max_value: 10.0
#     step: 0.1

  # - platform: template
  #   name: "VPD Target"
  #   id: vpd_target
  #   optimistic: true
  #   initial_value: 1.0
  #   min_value: 0.0
  #   max_value: 5.0
  #   step: 0.1