esphome:
  name: g2-exhaust1
  friendly_name: G2_EXHAUST1

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "NxxXh2HDdf/+vmOhtl2Dx0et5QuRfL5ozkDm8A04aZ0="

ota:
  - platform: esphome
    password: "ec6726c739a9331f01e4c7ef2b5f9e17"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "G2-Exhaust1 Fallback Hotspot"
    password: "fFBllyqlcT54"

captive_portal:

i2c:
  sda: 3
  scl: 4
  scan: true
  id: bus_a

bme68x_bsec2_i2c:
  address: 0x77
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V
  temperature_offset: 2.5

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_message:
    - topic: "g2/exhaust/fan/set"
      qos: 0
      then:
        - lambda: |-
            int speed = atoi(x.c_str());
            if (speed < 0) speed = 0;
            if (speed > 100) speed = 100;
            id(fan1_pwm).set_level(speed / 100.0);
            id(exhaust_fan).turn_on();

output:
  - platform: ledc
    pin: GPIO5
    id: fan1_pwm
    frequency: 15000 Hz
    inverted: True
    max_power: 1

fan:
  - platform: template
    name: "Exhaust Fan 1"
    id: exhaust_fan
    speed_count: 100
    availability:
      topic: "g2/exhaust/availability"
      payload_available: "online"
      payload_not_available: "offline"
    on_turn_on:
      - output.turn_on: fan1_pwm
      - mqtt.publish:
          topic: "g2/exhaust/fan/state/fan1"
          payload: "ON"
    on_turn_off:
      - output.turn_off: fan1_pwm
      - mqtt.publish:
          topic: "g2/exhaust/fan/state/fan1"
          payload: "OFF"

sensor:
  - platform: bme68x_bsec2
    temperature:
      id: temperature
      name: "BME680 Temperature"
      state_topic: "g2/exhaust/temperature"
    pressure:
      id: pressure
      name: "BME680 Pressure"
      state_topic: "g2/exhaust/pressure"
    humidity:
      id: humidity
      name: "BME680 Humidity"
      state_topic: "g2/exhaust/humidity"
    iaq:
      id: iaq
      name: "BME680 IAQ"
      state_topic: "g2/exhaust/iaq"
    co2_equivalent:
      id: co2_equivalent
      name: "BME680 CO2 Equivalent"
      state_topic: "g2/exhaust/co2"
    breath_voc_equivalent:
      id: breath_voc_equivalent
      name: "BME680 Breath VOC Equivalent"
      state_topic: "g2/exhaust/bvoc"

interval:
  - interval: 60s  # Adjust this to your preferred interval
    then:
      - mqtt.publish:
          topic: "g2/exhaust/temperature"
          payload: !lambda "return String(id(temperature).state).c_str();"
      - mqtt.publish:
          topic: "g2/exhaust/pressure"
          payload: !lambda "return String(id(pressure).state).c_str();"
      - mqtt.publish:
          topic: "g2/exhaust/humidity"
          payload: !lambda "return String(id(humidity).state).c_str();"
      - mqtt.publish:
          topic: "g2/exhaust/iaq"
          payload: !lambda "return String(id(iaq).state).c_str();"
      - mqtt.publish:
          topic: "g2/exhaust/co2_equivalent"
          payload: !lambda "return String(id(co2_equivalent).state).c_str();"
      - mqtt.publish:
          topic: "g2/exhaust/breath_voc_equivalent"
          payload: !lambda "return String(id(breath_voc_equivalent).state).c_str();"