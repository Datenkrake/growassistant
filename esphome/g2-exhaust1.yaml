esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable Home Assistant API
# api:
#   encryption:
#     key: "NxxXh2HDdf/+vmOhtl2Dx0et5QuRfL5ozkDm8A04aZ0="

ota:
  - platform: esphome
    password: "ec6726c739a9331f01e4c7ef2b5f9e17"

esphome:
  name: g2-exhaust1            

####################################################################
# configure substitutions and friendly name
####################################################################

  friendly_name: ${area_id}_${device_id}${suffix}

# Note for pinout on ESP32-C3 Supermini:
# Pin Functions
# GPIO0 / A0 (bottom right corner in top view with USB port on the top)
# GPIO1 / A1
# GPIO2 / A2 (external pull-up resistor and is a boot related pin)
# GPIO3 / A3
# GPIO4 / A4 / SCK
# GPIO5 / A5 / MISO
# GPIO6 / MOSI
# GPIO7 / SS
# GPIO8 / SDA
# GPIO9 / SCL (external pull-down resistor and is a boot related pin "BOOT button")
# GPIO10
# GPIO20 / RX
# GPIO21 / TX

substitutions:
  area_id: G2
  device_id: "EXHAUST"
  suffix: "_A"
  pin_sda: GPIO3
  pin_scl: GPIO4
  pin_fan1_pwm: GPIO5
  pin_fan2_pwm: GPIO8
  address_bme680: "0x77"
  bme680_temp_offset: "2.5"
  fan1_max: "1.0"
  fan2_max: "1.0"

####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

globals:
  - id: ${area_id}_${device_id}${suffix}_fan1_pwm_value
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: ${area_id}_${device_id}${suffix}_door_open
    type: bool
    restore_value: no
    initial_value: 'false'

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "auto/${area_id}/${device_id}"
  log_topic: "debug/${area_id}/${device_id}"
  on_message:
    - topic: ${area_id}/door_switch
      then:
        - lambda: |-
            if (strcmp(x.c_str(), "ON") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open) = true;
            } else if (strcmp(x.c_str(), "OFF") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open) = false;
            }
            id(update_exhaust_fan_speed).execute();

output:
  - platform: ledc
    pin: ${pin_fan1_pwm}
    id: ${area_id}_${device_id}${suffix}_fan1_pwm
    frequency: 15000 Hz
    inverted: True
    max_power: 0.8

  - platform: ledc
    pin: ${pin_fan2_pwm}
    id: ${area_id}_${device_id}${suffix}_fan2_pwm
    frequency: 15000 Hz
    inverted: True
    max_power: 0.5

fan:
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan1_pwm
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_fan1
    state_topic: "${area_id}/fan/state/${device_id}"
    speed_state_topic: "${area_id}/fan/speed/${device_id}"
    command_topic: "${area_id}/${device_id}/fan/state/${device_id}/set"
    speed_command_topic: "${area_id}/fan/speed/${device_id}/set"

  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan2_pwm
    name: "Exhaust [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_fan2
    state_topic: "${area_id}/fan/state/${device_id}"
    speed_state_topic: "${area_id}/fan/speed/${device_id}"
    command_topic: "${area_id}/${device_id}/fan/state/${device_id}/set"
    speed_command_topic: "${area_id}/fan/speed/${device_id}/set"

i2c:
  !include includes/i2c_bus_a.yaml
bme68x_bsec2_i2c:
  !include includes/bme680x_bsec2_i2c.yaml
  
sensor:
  # physical sensors
  - !include includes/sensor_bme68x_bsec2.yaml
  #calculated sensors
  - !include includes/sensor_vpd.yaml
  - !include includes/sensor_dew_point.yaml
# MQTT Sensors
  - !include includes/sensor_mqtt_vpd_leaf_offset.yaml
  - !include includes/sensor_mqtt_temperature_max.yaml
  - !include includes/sensor_mqtt_canopy_rh_target.yaml
  - !include includes/sensor_mqtt_canopy_humidity.yaml
  - !include includes/sensor_mqtt_canopy_temperature.yaml
  - !include includes/sensor_mqtt_gantry_rh_target.yaml
  - !include includes/sensor_mqtt_gantry_humidity.yaml
  - !include includes/sensor_mqtt_gantry_temperature.yaml

number:
  - !include includes/number_fan_speed_min.yaml
  - !include includes/number_fan_speed_max.yaml

interval:
  - interval: 10s
    then:
      - script.execute: update_exhaust_fan_speed
  - interval: 60s
    then:
      - script.execute: ${area_id}_${device_id}${suffix}_publish_fan_speed

script:
  - !include includes/script_update_exhaust_fan_speed.yaml

  - id: ${area_id}_${device_id}${suffix}_publish_fan_speed
    then:
      - mqtt.publish:
          topic: "${area_id}/fan/speed/${device_id}"
          payload: !lambda 'return std::to_string(id(${area_id}_${device_id}${suffix}_fan1).speed);'
