id: update_intake_fan_speed
then:
    - lambda: |-
        // Check if the door is open
        if (id(${area_id}_${device_id}${suffix}_door_open)) {
            // Door is open; turn off both fans
            auto call1 = id(${area_id}_${device_id}${suffix}_intake_fan).turn_off();
            call1.perform();
            ESP_LOGD("fan", "Door is open. Turning off fans.");
            return;
        }

        auto call2 = id(${area_id}_${device_id}${suffix}_intake_fan).turn_on();
        call2.perform();

        // Door is closed; proceed with fan speed adjustments
        // Default to gantry data
        float temperature = id(${area_id}_${device_id}${suffix}_canopy_temperature).state;
        float humidity = id(${area_id}_${device_id}${suffix}_canopy_humidity).state;
        float rh_target = id(${area_id}_${device_id}${suffix}_canopy_rh_target).state;

        // Use canopy data if available
        if (!isnan(id(${area_id}_${device_id}${suffix}_gantry_temperature).state)) {
            temperature = id(${area_id}_${device_id}${suffix}_gantry_temperature).state;
        }
        if (!isnan(id(${area_id}_${device_id}${suffix}_canopy_humidity).state)) {
            humidity = id(${area_id}_${device_id}${suffix}_gantry_humidity).state;
        }
        if (!isnan(id(${area_id}_${device_id}${suffix}_gantry_rh_target).state)) {
            rh_target = id(${area_id}_${device_id}${suffix}_gantry_rh_target).state;
        }

        // Get temperature max value
        float _temperature_max = id(${area_id}_${device_id}${suffix}_temperature_max).state;

        // Adjust fan speed based on conditions
        float fan_value = id(${area_id}_${device_id}${suffix}_fan1_pwm_value);

        // If temperature exceeds temperature max, increase fan speed
        if (temperature > _temperature_max) {
            fan_value += 1.0;
        }

        // If humidity exceeds rh_target, increase fan speed, else decrease fan speed
        if (humidity > rh_target) {
            fan_value += 1.0;
        } else {
            fan_value -= 2.0;
        }

        // Retrieve min and max fan speeds
        float fan_min = id(${area_id}_${device_id}${suffix}_fan_speed_min).state;
        float fan_max = id(${area_id}_${device_id}${suffix}_fan_speed_max).state;

        // Clamp the fan value between min and max
        fan_value = fmax(fan_min, fmin(fan_max, fan_value));

        // Update the global fan speed value
        id(${area_id}_${device_id}${suffix}_fan1_pwm_value) = fan_value;

        // Set the fan speed to both fans
        id(${area_id}_${device_id}${suffix}_intake_fan).speed = fan_value;
           
        ESP_LOGD("fan", "Updating fan speed to %.2f%% (Min: %.2f%%, Max: %.2f%%)", fan_value, fan_min, fan_max);