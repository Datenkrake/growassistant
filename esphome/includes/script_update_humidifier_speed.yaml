id: update_humidifier_speed
then:
  - lambda: |-
      // Define minimum interval between adjustments (e.g., 60 seconds)
      static unsigned long last_adjust_time = 0;
      unsigned long current_time = millis();
      const unsigned long adjust_interval = 60000;  // 60,000 ms = 60 seconds

      if (current_time - last_adjust_time < adjust_interval) {
        ESP_LOGD("humidifier", "Adjustment too soon. Skipping speed change.");
        return;
      }

      // Check if the door is open
      bool door_open = id(${area_id}_${device_id}${suffix}_door_open);
      ESP_LOGD("humidifier", "Checking door status: %s", door_open ? "OPEN" : "CLOSED");

      if (door_open) {
        // Door is open; turn off humidifier
        id(${area_id}_${device_id}${suffix}_humidifier).turn_off();
        ESP_LOGD("humidifier", "Door is open. Turning off humidifier.");
        return;
      }

      // Check if humidifier is enabled
      bool humidifier_enabled = id(${area_id}_${device_id}${suffix}_enable).state;
      ESP_LOGD("humidifier", "Humidifier enabled state: %s", humidifier_enabled ? "ENABLED" : "DISABLED");

      if (humidifier_enabled) {
        // Turn on the humidifier
        auto call_on = id(${area_id}_${device_id}${suffix}_humidifier).turn_on();
        call_on.perform();
        ESP_LOGD("humidifier", "Turning on humidifier.");

        // Retrieve RH targets
        float canopy_rh_target = id(${area_id}_${device_id}${suffix}_canopy_rh_target).state;
        float gantry_rh_target = id(${area_id}_${device_id}${suffix}_gantry_rh_target).state;
        ESP_LOGD("humidifier", "Canopy RH Target: %.2f%%, Gantry RH Target: %.2f%%", canopy_rh_target, gantry_rh_target);

        // Determine which RH target to use
        float rh_target;
        if (!std::isnan(canopy_rh_target)) {
          rh_target = canopy_rh_target;
        } else if (!std::isnan(gantry_rh_target)) {
          rh_target = gantry_rh_target;
        } else {
          ESP_LOGW("humidifier", "Both RH targets are NaN. Skipping speed adjustment.");
          return;
        }
        ESP_LOGD("humidifier", "Selected RH Target: %.2f%%", rh_target);

        // Retrieve current RH
        float canopy_rh = id(${area_id}_${device_id}${suffix}_canopy_humidity).state;
        float gantry_rh = id(${area_id}_${device_id}${suffix}_gantry_humidity).state;
        float rh = !std::isnan(canopy_rh) ? canopy_rh : gantry_rh;
        ESP_LOGD("humidifier", "Current RH: %.2f%%", rh);

        // Calculate RH difference
        float rh_difference = rh_target - rh;
        ESP_LOGD("humidifier", "RH difference: %.2f%%", rh_difference);

        // Check if rh_target is valid
        if (std::isnan(rh_target)) {
          ESP_LOGW("humidifier", "RH Target is NaN. Skipping speed adjustment.");
          return;
        }

        // Retrieve current humidifier speed
        int current_speed = id(${area_id}_${device_id}${suffix}_humidifier).speed;
        
        // Validate current_speed, ensure it is within 0-100%
        if (current_speed < 0 || current_speed > 100) {
          ESP_LOGW("humidifier", "Invalid current_speed (%d%%). Resetting to 0%%.", current_speed);
          current_speed = 0;
          id(${area_id}_${device_id}${suffix}_humidifier).speed = current_speed;
        }
        ESP_LOGD("humidifier", "Current Humidifier Speed: %d%%", current_speed);

        // Define minimum RH difference to trigger adjustment (e.g., 1%)
        const float min_rh_diff = 0.5;

        // Round the RH difference to the nearest integer
        int error = roundf(rh_difference);
        ESP_LOGD("humidifier", "Rounded error: %d%%", error);

        // Adjust humidifier speed based on RH comparison with hysteresis
        if (error > min_rh_diff) {
          // Increase speed by error, ensuring it doesn't exceed 100%
          int new_speed = std::min(current_speed + error, 100);
          id(${area_id}_${device_id}${suffix}_humidifier).speed = new_speed;
          ESP_LOGD("humidifier", "RH target > current RH by > %.2f%%. Increasing speed to %d%%", min_rh_diff, new_speed);
          last_adjust_time = current_time;
        } else if (error < -min_rh_diff) {
          // Decrease speed by (abs(error) * 2), ensuring it doesn't go below 0%
          int adjustment = std::abs(error) * 2;
          int new_speed = std::max(current_speed - adjustment, 0);
          id(${area_id}_${device_id}${suffix}_humidifier).speed = new_speed;
          ESP_LOGD("humidifier", "RH target < current RH by > %.2f%%. Decreasing speed to %d%%", min_rh_diff, new_speed);
          last_adjust_time = current_time;
        } else {
          ESP_LOGD("humidifier", "RH difference within Â±%.2f%%. No speed adjustment needed.", min_rh_diff);
        }
      } else {
        // Humidifier is disabled; turn it off
        auto call_off = id(${area_id}_${device_id}${suffix}_humidifier).turn_off();
        call_off.perform();
        ESP_LOGD("humidifier", "Humidifier is disabled. Turning off humidifier.");
      }
