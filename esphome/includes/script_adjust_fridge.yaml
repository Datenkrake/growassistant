id: adjust_fridge
then:
- lambda: |-
    ESP_LOGD("adjust_fridge", "Starting fridge adjustment with dew-point control...");

    // Define a 5-stage drying profile: durations (hours) and corresponding targets
    std::vector<int> durations = {96, 192, 0};  // last '0' indefinite until snap
    std::vector<float> temp_targets = {20.0, 20.0, 15.0};
    std::vector<float> dew_targets  = {12.0, 12.5, 8.0};  // desired max dew-point

    float delta_T   = 0.5;  // hysteresis band ±0.5 °C
    float dew_margin = 2.0; // minimum dew-point depression margin

    // Compute elapsed time since start
    int start_ts = id(${area_id}_${device_id}${suffix}_start_date).state;
    int now      = id(mqtt_time).timestamp_now();
    int hours    = (now - start_ts) / 3600;

    // Determine current phase
    int phase = 0;
    int cum   = 0;
    for (size_t i = 0; i < durations.size(); i++) {
        cum += durations[i];
        if (hours < cum || i == durations.size() - 1) {
        phase = i;
        break;
        }
    }

    // Read sensors and targets
    float T     = id(${area_id}_${device_id}${suffix}_temperature).state;
    float dew_pt = id(${area_id}_${device_id}${suffix}_dew_point).state;
    float T_set  = temp_targets[phase];
    float dew_set = dew_targets[phase];

    ESP_LOGD("adjust_fridge", "Phase %d: T_set=%.1f °C, dew_set=%.1f °C", phase, T_set, dew_set);
    ESP_LOGD("adjust_fridge", "Current T=%.1f °C, dew_pt=%.1f °C", T, dew_pt);

    // Evaluate conditions
    bool too_cold     = T <  (T_set - delta_T);
    bool too_hot      = T >  (T_set + delta_T);
    bool dew_risky    = (T - dew_pt) < dew_margin;
    bool dew_too_high = dew_pt > dew_set;

    ESP_LOGD("adjust_fridge", "Hysteresis band [%.1f-%.1f], dew_margin=%.1f", T_set - delta_T, T_set + delta_T, dew_margin);

    // Control logic
    // Heater when too cold
    id(heater_should_be_on) = too_cold;
    // Condenser when too hot AND dew safe AND dew-point below target
    id(condenser_should_be_on) = too_hot && !dew_risky && !dew_too_high;

    ESP_LOGD("adjust_fridge", "Heater: %s, Condenser: %s", 
                id(heater_should_be_on) ? "ON" : "OFF", 
                id(condenser_should_be_on) ? "ON" : "OFF");

- mqtt.publish:
    topic: "G3D/mains/command/switch:0"
    payload: !lambda |-
        return id(heater_should_be_on) ? "on" : "off";

- mqtt.publish:
    topic: "G3D/mains/command/switch:1"
    payload: !lambda |-
        return id(condenser_should_be_on) ? "on" : "off";
