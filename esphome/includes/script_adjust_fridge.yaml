id: adjust_fridge
then:
- lambda: |-
    ESP_LOGD("adjust_fridge", "Starting fridge adjustment with cure-phase hold logic...");

    // Drying profile: durations and targets (user-configurable length)
    std::vector<int> durations     = {96, 192, 0};
    std::vector<float> temp_targets = {20.0, 20.0, 15.0};
    std::vector<float> dew_targets  = {12.0, 12.5, 8.0};

    float delta_T         = 0.5;  // hysteresis band
    float heat_cap_offset = 2.0;  // max °C above set-point for heating
    float dew_margin      = 2.0;  // min dew-point depression

    // Determine phase index
    int start_ts = id(${area_id}_${device_id}${suffix}_start_date).state;
    int now_ts   = id(mqtt_time).timestamp_now();
    int hours    = (now_ts - start_ts) / 3600;
    int phase = 0;
    int cum = 0;
    for (size_t i = 0; i < durations.size(); ++i) {
      cum += durations[i];
      if (hours < cum || i == durations.size() - 1) { phase = i; break; }
    }
    bool last_phase = (phase == durations.size() - 1);

    float T      = id(${area_id}_${device_id}${suffix}_temperature).state;
    float dew_pt = id(${area_id}_${device_id}${suffix}_dew_point).state;
    float T_set  = temp_targets[phase];
    float dew_set= dew_targets[phase];

    bool dew_risky    = (T - dew_pt) < dew_margin;
    bool dew_too_high = dew_pt > dew_set;

    ESP_LOGD("adjust_fridge", "Phase %d/%d: T_set=%.1f°C, dew_set=%.1f°C, T=%.2f°C, dew_pt=%.2f°C, last_phase=%s", 
             phase, durations.size()-1, T_set, dew_set, T, dew_pt, last_phase?"Y":"N");

    // 1) Dew-risk recovery: dehumidify + heat based on depression only
    if (dew_risky) {
      id(condenser_should_be_on) = true;
      id(heater_should_be_on)    = (T < T_set + heat_cap_offset);
      ESP_LOGD("adjust_fridge", "Dew-risk recovery: heater=%s, condenser=ON", id(heater_should_be_on)?"ON":"OFF");

    // 2) Dew-point too high: dehumidify only, no heating
    } else if (dew_too_high) {
      id(condenser_should_be_on) = true;
      id(heater_should_be_on)    = false;
      ESP_LOGD("adjust_fridge", "Dew-point high: condenser=ON, heater=OFF");

    } else if (!last_phase) {
      // 2) Regular temp hysteresis for non-cure phases
      if (T > T_set + delta_T) {
        id(condenser_should_be_on) = true;
        id(heater_should_be_on)    = false;
        ESP_LOGD("adjust_fridge", "Too hot: condenser=ON, heater=OFF");
      } else if (T < T_set - delta_T) {
        id(condenser_should_be_on) = true;
        id(heater_should_be_on)    = (T < T_set + heat_cap_offset);
        ESP_LOGD("adjust_fridge", "Too cold: heater=%s, condenser=ON", id(heater_should_be_on)?"ON":"OFF");
      } else {
      // 3) Cure/storage phase: dehumidify on dew risk/high and maintain temperature with condenser hysteresis
      if (dew_risky || dew_too_high) {
        id(condenser_should_be_on) = true;
        id(heater_should_be_on)    = false;  // no heat during cure unless dew recovery (handled above)
        ESP_LOGD("adjust_fridge", "Cure dew recovery: condenser=ON");
      } else if (T > T_set + delta_T) {
        id(condenser_should_be_on) = true;
        id(heater_should_be_on)    = false;
        ESP_LOGD("adjust_fridge", "Cure too hot: condenser=ON");
      } else if (T < T_set - delta_T) {
        id(condenser_should_be_on) = false;
        id(heater_should_be_on)    = false;
        ESP_LOGD("adjust_fridge", "Cure too cold: no heat, condenser=OFF");
      } else {
        id(condenser_should_be_on) = false;
        id(heater_should_be_on)    = false;
        ESP_LOGD("adjust_fridge", "Cure within band: idle condenser and heater");
      }
    }

    } else {
      // 3) Cure/storage phase: only dehumidify on dew risk/high, never actively heat
      id(condenser_should_be_on) = false;
      id(heater_should_be_on)    = false;
      ESP_LOGD("adjust_fridge", "Cure hold: idle (no heat)");
    }

- mqtt.publish:
    topic: "G3D/mains/command/switch:0"
    payload: !lambda |-
      return id(heater_should_be_on) ? "on" : "off";
- mqtt.publish:
    topic: "G3D/mains/command/switch:1"
    payload: !lambda |-
      return id(condenser_should_be_on) ? "on" : "off";
