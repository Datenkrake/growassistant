# This sensor is used to track the progress of the current phase of the schedule.
# It tracks the number of days since the start of the phase and the number of days remaining.

# The entities used in this file are:
#  number.{area_id}_{device_id}}_start_date_epoch_{area_id}}_{device_id}
#  number.{area_id}_{device_id}}_sunrise_time_seconds_from_midnight_{area_id}}_{device_id}
#  number.{area_id}_{device_id}}_duration_vegetative_days_{area_id}}_{device_id}
#  number.{area_id}_{device_id}}_duration_flipping_days_{area_id}}_{device_id}
#  number.{area_id}_{device_id}}_duration_generative_days_{area_id}}_{device_id}
#  number.{area_id}_{device_id}}_duration_drying_days_{area_id}}_{device_id}

# The output of this sensor is one text sensor entity that is published to the MQTT broker.
# The sensor is updated hourly.
# The format of the sensor is:
#  {area_id}/schedule_phase_progress/state/{device_id}
# The payload is a string in the format:
# V14/14F3/3G30/55D0/0
# The first number is the number of days since the start of the phase.
# The second number is the total number of days in the phase.
# V is the vegetative phase, F is the flipping phase, G is the generative phase, and D is the drying phase.

# This is the implementation of the sensor.

platform: template
name: "Schedule Progress [${area_id}_${device_id}${suffix}]"
id: ${area_id}_${device_id}${suffix}_schedule_phase_progress
state_topic: "${area_id}/schedule_phase_progress/state/${device_id}"
update_interval: 1h
lambda: |-
  int start_date_epoch = id(${area_id}_${device_id}${suffix}_start_date).state;
  int sunrise_time_seconds_from_midnight = id(${area_id}_${device_id}${suffix}_sunrise_time).state;
  int duration_vegetative_days = id(${area_id}_${device_id}${suffix}_duration_vegetative).state;
  int duration_flipping_days = id(${area_id}_${device_id}${suffix}_duration_flipping).state;
  int duration_generative_days = id(${area_id}_${device_id}${suffix}_duration_generative).state;
  int duration_drying_days = id(${area_id}_${device_id}${suffix}_duration_drying).state;
  int current_time = id(mqtt_time).now().timestamp;
  int sunrise_time = start_date_epoch + sunrise_time_seconds_from_midnight;
  int current_day = (current_time - sunrise_time) / 86400;
  int total_days_vegetative = duration_vegetative_days;
  int total_days_flipping = duration_vegetative_days + duration_flipping_days;
  int total_days_generative = duration_vegetative_days + duration_flipping_days + duration_generative_days;
  int total_days_drying = duration_vegetative_days + duration_flipping_days + duration_generative_days + duration_drying_days;
      
  int veg_progress = std::min(current_day, total_days_vegetative);
  int flip_progress = std::min(std::max(0, current_day - total_days_vegetative), duration_flipping_days);
  int gen_progress = std::min(std::max(0, current_day - total_days_flipping), duration_generative_days);
  int dry_progress = std::min(std::max(0, current_day - total_days_generative), duration_drying_days);

  char progress[100];
  snprintf(progress, sizeof(progress), "T%d/%dV%d/%dF%d/%dG%d/%dD%d/%d",
          current_day, total_days_drying,
          veg_progress, duration_vegetative_days,
          flip_progress, duration_flipping_days,
          gen_progress, duration_generative_days,
          dry_progress, duration_drying_days);

  return std::string(progress);

# End of file
