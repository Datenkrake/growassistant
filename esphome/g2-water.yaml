esphome:
  name: g2-water
  friendly_name: G2_WATER

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "afF+LRRn2xJxO47lHzfxHAOmZksYw4lmOAZt1J83fxs="

ota:
  - platform: esphome
    password: "dc90a879c18e4b2a08e6faaa40a22be4"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "G2-Water Fallback Hotspot"
    password: "hscwfhyDtBvQ"

captive_portal:
    
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "g2/water"

switch:
  - platform: gpio
    pin: GPIO16
    name: "G2 Irrigation Pump"
    id: g2_irrigation_pump

  - platform: gpio
    pin: GPIO17
    name: "G2 Circulation Pump"
    id: g2_circulation_pump

  - platform: template
    name: "G2 Water Enable"
    id: g2_water_enable
    optimistic: true


number:
  - platform: template
    name: "G2 Irrigation Period"
    id: g2_irrigation_period
    optimistic: True
    initial_value: 60
    min_value: 1
    max_value: 1440
    step: 1
    mode: BOX
    unit_of_measurement: "minutes"
    icon: mdi:water-pump
  
  - platform: template
    name: "G2 Irrigation Duration"
    id: g2_irrigation_duration
    optimistic: True
    initial_value: 30
    min_value: 1
    max_value: 300
    step: 1
    mode: BOX
    unit_of_measurement: "seconds"
    icon: mdi:water-pump

  - platform: template
    name: "G2 Circulation Period"
    id: g2_circulation_period
    optimistic: True
    initial_value: 60
    min_value: 1
    max_value: 1440
    step: 1
    mode: BOX
    unit_of_measurement: "minutes"
    icon: mdi:water-pump
  
  - platform: template
    name: "G2 Circulation Duration"
    id: g2_circulation_duration
    optimistic: True
    initial_value: 5
    min_value: 1
    max_value: 30
    step: 1
    mode: BOX
    unit_of_measurement: "minutes"
    icon: mdi:water-pump

interval:
  # Irrigation Interval
  - interval: 1min  # This interval will check every minute
    then:
      - if:
          condition:
            lambda: 'return id(g2_water_enable).state && (millis() / 60000) % ((int) id(g2_irrigation_period).state) == 0;'
          then:
            - switch.turn_on: g2_irrigation_pump
            - delay: !lambda 'return (int) id(g2_irrigation_duration).state * 1000;'
            - switch.turn_off: g2_irrigation_pump

  # Circulation Interval
  - interval: 1min  # This interval will check every minute
    then:
      - if:
          condition:
            lambda: 'return id(g2_water_enable).state && (millis() / 60000) % ((int) id(g2_circulation_period).state) == 0;'
          then:
            - switch.turn_on: g2_circulation_pump
            - delay: !lambda 'return (int) id(g2_circulation_duration).state * 60000;'
            - switch.turn_off: g2_circulation_pump