esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable Home Assistant API
# api:
#   encryption:
#     key: "afF+LRRn2xJxO47lHzfxHAOmZksYw4lmOAZt1J83fxs="

ota:
  - platform: esphome
    password: "dc90a879c18e4b2a08e6faaa40a22be4"

esphome:
  name: g2-water

####################################################################
# configure substitutions and friendly name
####################################################################

  area: ${area_id}
  friendly_name: ${area_id}_${device_id}${suffix}

substitutions:
  area_id: G2
  device_id: "WATER"
  suffix: ""
  #pin_door_switch: GPIO21
  pin_irrigation_output: GPIO16
  pin_circulation_output: GPIO17

####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "auto/${area_id}/${device_id}"
  log_topic: "debug/${area_id}/${device_id}"

switch:
  - !include includes/switch_enable.yaml
  - !include includes/switch_enable_at_night.yaml
  - !include includes/switch_circulation_pump.yaml
  - !include includes/switch_irrigation_pump.yaml

number:
  - !include includes/number_irrigation_period.yaml
  - !include includes/number_irrigation_duration.yaml
  - !include includes/number_circulation_period.yaml
  - !include includes/number_circulation_duration.yaml

sensor:
  - !include includes/sensor_mqtt_day_phase_target.yaml

interval:
  # Irrigation Interval
  - interval: 1min  # This interval will check every minute
    then:
      - if:
          condition:
            lambda: |
              return id(${area_id}_${device_id}${suffix}_enable).state &&
                     id(${area_id}_${device_id}${suffix}_enable_at_night).state &&
                     id(${area_id}_${device_id}${suffix}_day_phase_target).state &&
                     (millis() / 60000) % ((int) id(${area_id}_${device_id}${suffix}_irrigation_period).state) == 0;
          then:
            - switch.turn_on: ${area_id}_${device_id}${suffix}_irrigation_pump
            - delay: !lambda 'return (int) id(${area_id}_${device_id}${suffix}_irrigation_duration).state * 1000;'
            - switch.turn_off: ${area_id}_${device_id}${suffix}_irrigation_pump

  # Circulation Interval
  - interval: 1min  # This interval will check every minute
    then:
      - if:
          condition:
            lambda: 'return id(${area_id}_${device_id}${suffix}_enable).state && (millis() / 60000) % ((int) id(${area_id}_${device_id}${suffix}_circulation_period).state) == 0;'
          then:
            - switch.turn_on: ${area_id}_${device_id}${suffix}_circulation_pump
            - delay: !lambda 'return (int) id(${area_id}_${device_id}${suffix}_circulation_duration).state * 60000;'
            - switch.turn_off: ${area_id}_${device_id}${suffix}_circulation_pump
