esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable logging
logger:
  level: WARN          # options: NONE, ERROR, WARN, INFO, DEBUG, VERBOSE
  logs:
    wifi: WARN
# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: "4"
  password: "8AHQ972324Au394+"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "D2-Freezer Fallback Hotspot"
    password: "KBjOZYrlZ5bm"

captive_portal:
    
esphome:
  name: d2-freezer

####################################################################
# configure substitutions and friendly name
####################################################################

  area: ${area_id}
  friendly_name: ${area_id}_${device_id}${suffix}

# Note for pinout on ESP32-C3 Supermini:
# Pin Functions
# GPIO0 / A0 (bottom right corner in top view with USB port on the top)
# GPIO1 / A1
# GPIO2 / A2 (external pull-up resistor and is a boot related pin)
# GPIO3 / A3
# GPIO4 / A4 / SCK
# GPIO5 / A5 / MISO
# GPIO6 / MOSI
# GPIO7 / SS
# GPIO8 / SDA
# GPIO9 / SCL (external pull-down resistor and is a boot related pin "BOOT button")
# GPIO10
# GPIO20 / RX
# GPIO21 / TX

substitutions:
  area_id: D2
  device_id: "FREEZER"
  suffix: ""
  pin_sda: GPIO5
  pin_scl: GPIO6
  pin_fan2_pwm: GPIO1
  pin_heater_pwm: GPIO0
  pin_vac_enable: GPIO3
  address_sht4x: "0x44"


####################################################################
# generic yaml below
####################################################################
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "auto/${area_id}/${device_id}"
  log_topic: "debug/${area_id}/${device_id}"

time:
  - !include includes/time_mqtt.yaml

i2c:
  !include includes/i2c_bus_a.yaml

globals:
  - id: heater_should_be_on
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: condenser_should_be_on
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: vac_should_be_on
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ${area_id}_${device_id}${suffix}_exhaust_fan_pwm_value
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: ${area_id}_${device_id}${suffix}_fan_speed_step
    type: int
    restore_value: no
    initial_value: '0'
  - id: G3D_BRAIN_target_temp
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: G3D_BRAIN_target_humidity
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: G3D_TEMP_BUMP
    type: float
    restore_value: yes
    initial_value: '0.0'
  - id: pump_is_running
    type: bool
    restore_value: no
    initial_value: 'false'

output:
  - platform: ledc
    pin: ${pin_fan2_pwm}
    id: ${area_id}_${device_id}${suffix}_circulation_pwm
    frequency: 25000 Hz
    inverted: True
    max_power: 1.0
  - platform: ledc
    pin: ${pin_heater_pwm}
    id: ${area_id}_${device_id}${suffix}_heater_pwm
    frequency: 25000 Hz
    inverted: False
    max_power: 1.0
  - platform: ledc
    pin: ${pin_vac_enable}
    id: ${area_id}_${device_id}${suffix}_vac_pwm
    frequency: 10000 Hz
    
switch:
  - platform: template
    name: "Vacuum Pump (Static PWM with Pull‑In)"
    id: "${area_id}_${device_id}${suffix}_vac_enable"
    optimistic: true
    turn_on_action:
      - script.execute: vac_pump_pull_in
    turn_off_action:
      - output.set_level:
          id: "${area_id}_${device_id}${suffix}_vac_pwm"
          level: 0.0                 # stop PWM immediately
      - lambda: 'id(pump_is_running) = false;'   # clear the flag
fan:
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_circulation_pwm
    name: "Circulation Fan [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_circulation
    state_topic: "${area_id}/fan/state/CIRCULATION"
    speed_state_topic: "${area_id}/fan/speed/CIRCULATION"
    command_topic: "${area_id}/${device_id}/fan/state/CIRCULATION/set"
    speed_command_topic: "${area_id}/fan/speed/CIRCULATION/set"
    restore_mode: ALWAYS_ON  # Options: ALWAYS_OFF, ALWAYS_ON, RESTORE_DEFAULT_OFF, RESTORE_DEFAULT_ON, RESTORE_INVERTED_DEFAULT_OFF, RESTORE_INVERTED_DEFAULT_ON
    speed_count: 100
    on_turn_on:
      - fan.turn_on:
          id: ${area_id}_${device_id}${suffix}_circulation
          speed: 50

  - platform: speed
    output: ${area_id}_${device_id}${suffix}_heater_pwm
    name: "Heater Fan [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_heater
    state_topic: "${area_id}/fan/state/HEATER"
    speed_state_topic: "${area_id}/fan/speed/HEATER"
    command_topic: "${area_id}/${device_id}/fan/state/HEATER/set"
    speed_command_topic: "${area_id}/fan/speed/HEATER/set"
    restore_mode: ALWAYS_OFF  # Options: ALWAYS_OFF, ALWAYS_ON, RESTORE_DEFAULT_OFF, RESTORE_DEFAULT_ON, RESTORE_INVERTED_DEFAULT_OFF, RESTORE_INVERTED_DEFAULT_ON
    speed_count: 100

sensor:
  # PHYSICAL SENSORS
  ## TEMPERATURE, HUMIDITY
  - platform: sht4x
    temperature:
        name: "Temperature SHT [${area_id}_${device_id}${suffix}]"
        id: ${area_id}_${device_id}${suffix}_temperature
        state_topic: "${area_id}/temperature/state/SHT"
        filters:
          - median:
              window_size: 5  # Adjust as needed to remove outliers
              send_every: 1
          - sliding_window_moving_average:
              window_size: 10  # 10 samples at 1s intervals = 10s average
              send_every: 1
    humidity:
        name: "Humidity SHT [${area_id}_${device_id}${suffix}]"
        id: ${area_id}_${device_id}${suffix}_humidity
        state_topic: "${area_id}/humidity/state/SHT"
        filters:
          - median:
              window_size: 5  # Adjust as needed to remove outliers
              send_every: 1
          - sliding_window_moving_average:
              window_size: 10  # 10 samples at 1s intervals = 10s average
              send_every: 1
    address: ${address_sht4x}
    update_interval: 1s
  - platform: aht10
    variant: AHT10
    temperature:
        name: "Temperature AHT [${area_id}_${device_id}${suffix}]"
        id: ${area_id}_${device_id}${suffix}_temperature_aht
        state_topic: "${area_id}/humidity/state/AHT"
        filters:
          - median:
              window_size: 5  # Adjust as needed to remove outliers
              send_every: 1
          - sliding_window_moving_average:
              window_size: 10  # 10 samples at 1s intervals = 10s average
              send_every: 1
    humidity:
        name: "Humidity AHT [${area_id}_${device_id}${suffix}]"
        id: ${area_id}_${device_id}${suffix}_humidity_aht
        state_topic: "${area_id}/humidity/state/AHT"
        filters:
          - median:
              window_size: 5  # Adjust as needed to remove outliers
              send_every: 1
          - sliding_window_moving_average:
              window_size: 10  # 10 samples at 1s intervals = 10s average
              send_every: 1
    update_interval: 1s

  # CALCULATED SENSORS
  ## CLIMATE
  - platform: template
    name: "VPD [${area_id}_${device_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_vpd
    state_topic: "${area_id}/vpd/state/${device_id}"
    unit_of_measurement: "kPa"
    update_interval: 10s
    accuracy_decimals: 2
    lambda: |
        float LT = id(${area_id}_${device_id}${suffix}_temperature).state;
        float rh = id(${area_id}_${device_id}${suffix}_humidity).state;
        float ASVP = 610.78 * exp((LT / (LT + 237.3)) * 17.2694);
        float LSVP = 610.78 * exp((LT / (LT + 237.3)) * 17.2694);
        float LVPD = (LSVP - (ASVP * (rh / 100.0))) / 1000.0;
        return LVPD;
    
  - !include includes/sensor_dew_point.yaml

number:
  - !include includes/number_start_date.yaml

# This could be placed inside a script: or automation:
interval:
  - interval: 10s
    then:
      # ------------------------------------------------------------------
      # 1️⃣ Run another script (e.g., to adjust the fridge)
      # ------------------------------------------------------------------
      - script.execute: adjust_freezer

      # ------------------------------------------------------------------
      # 2️⃣ Heater control – read a global bool and set speed accordingly
      # ------------------------------------------------------------------
      - if:
          condition:
            lambda: |-                     # true when heater SHOULD be on
              return id(heater_should_be_on);
          then:
            # Heater is supposed to be ON
            - switch.control:
                id: ${area_id}_${device_id}${suffix}_vac_enable
                state: false
            - fan.turn_on:
                id: ${area_id}_${device_id}${suffix}_heater
                speed: 80
          else:
            - fan.turn_off:
                id: ${area_id}_${device_id}${suffix}_heater
            - if:
                condition:
                  lambda: |-                     # true when heater SHOULD be on
                    return id(vac_should_be_on);
                then:
                  - switch.control:
                      id: ${area_id}_${device_id}${suffix}_vac_enable
                      state: true
                else:
                  - switch.control:
                      id: ${area_id}_${device_id}${suffix}_vac_enable
                      state: false
                

      # ------------------------------------------------------------------
      # 3️⃣ Publish the condenser state via MQTT
      # ------------------------------------------------------------------
      - mqtt.publish:
          topic: "${area_id}/mains/command/switch:0"
          payload: !lambda |-
            return id(condenser_should_be_on) ? "on" : "off";

script:
  - !include includes/script_adjust_freezer.yaml
  - id: vac_pump_pull_in
    mode: restart                     # restart if the user taps the switch again
    then:
      # ---- Guard: run burst only when pump_is_running == false ----
      - if:
          condition:
            lambda: 'return !id(pump_is_running);'
          then:
            # 2 s at 100 % (full speed)
            - output.set_level:
                id: "${area_id}_${device_id}${suffix}_vac_pwm"
                level: 1.0                 # 100 % duty → full 12 V on the pump
            - delay: 0.5s

      # ---- After the guard (whether we did the burst or not) set the steady duty ----
      - output.set_level:
          id: "${area_id}_${device_id}${suffix}_vac_pwm"
          level: 0.85              # <-- your desired steady duty (0.0‑1.0)

      # ---- Mark the pump as running (now we definitely have PWM > 0) ----
      - lambda: 'id(pump_is_running) = true;'