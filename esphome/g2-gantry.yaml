esphome:
  name: g2-gantry
  friendly_name: G2_GANTRY

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "fUzPI9NZK1iPOvmrcCaSW53rNJgqktJFNpqJEftoQQY="

ota:
  - platform: esphome
    password: "f494367364d46032c189203283b27107"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "G2-Gantry Fallback Hotspot"
    password: "sdeWIJobDX5x"

captive_portal:
    
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "g2/gantry"

# I2C Bus Configuration
i2c:
  sda: 0  # GPIO0
  scl: 1  # GPIO1
  scan: true  # Optional: enables scanning for I2C devices at startup

# Sensors
sensor:
  - platform: sht3xd
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44
    update_interval: 30s

  - platform: ultrasonic
    trigger_pin: 5
    echo_pin: 6
    name: "Position"
    update_interval: 1s
    timeout: 2m
    filters:
    - sliding_window_moving_average:
        window_size: 60
        send_every: 60

  - platform: template
    name: "VPD Sensor"
    unit_of_measurement: "kPa"
    update_interval: 30s
    lambda: |
      float temp = id(temperature).state;
      float rh = id(humidity).state;
      float leaf_offset = id(vpd_leaf_offset).state;
      float LT = temp + leaf_offset;
      float ASVP = 610.78 * exp((temp / (temp + 237.3)) * 17.2694);
      float LSVP = 610.78 * exp((LT / (LT + 237.3)) * 17.2694);
      float LVPD = (LSVP - (ASVP * (rh / 100.0))) / 1000.0;
      return roundf(LVPD * 100.0) / 100.0;

  - platform: template
    name: "RH Target"
    unit_of_measurement: "%"
    update_interval: 30s
    lambda: |
      float T = id(temperature).state;
      float LT = T - 2.0;
      float ASVP = 610.78 * pow(2.71828, (T / (T + 237.3)) * 17.2694);
      float LSVP = 610.78 * pow(2.71828, (LT / (LT + 237.3)) * 17.2694);
      float LVPD_TARGET = id(vpd_target).state;
      float RH_TARGET = (LSVP - LVPD_TARGET * 1000) / ASVP * 100;
      return roundf(RH_TARGET * 10.0) / 10.0;

  - platform: template
    name: "Dew Point"
    unit_of_measurement: "Â°C"
    update_interval: 30s
    lambda: |
      float T = id(temperature).state;
      float RH = id(humidity).state;
      float a = 17.27;
      float b = 237.7;
      float alpha = ((a * T) / (b + T)) + log(RH / 100.0);
      float dew_point = (b * alpha) / (a - alpha);
      return roundf(dew_point * 10.0) / 10.0;

number:
  - platform: template
    name: "Leaf Offset"
    id: vpd_leaf_offset
    optimistic: true
    initial_value: 0.0
    min_value: -10.0
    max_value: 10.0
    step: 0.1

  - platform: template
    name: "VPD Target"
    id: vpd_target
    optimistic: true
    initial_value: 1.0
    min_value: 0.0
    max_value: 5.0
    step: 0.1


# Outputs for PWM Fans
output:
  - platform: ledc
    pin: 3  # GPIO3
    id: fan_pwm_1
    frequency: 25000 Hz  # 25 kHz is a common frequency for fans
    channel: 0
    # Optional: Set initial duty cycle to 0%
    inverted: true

  - platform: ledc
    pin: 4  # GPIO4
    id: fan_pwm_2
    frequency: 25000 Hz
    channel: 1
    inverted: true

# Fan Controls
fan:
  - platform: speed
    name: "Wind"
    output: fan_pwm_1

  - platform: speed
    name: "Wind"
    output: fan_pwm_2