esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable Home Assistant API
# api:
#   encryption:
#     key: "fUzPI9NZK1iPOvmrcCaSW53rNJgqktJFNpqJEftoQQY="

ota:
  - platform: esphome
    password: "f494367364d46032c189203283b27107"

esphome:
  name: g2-gantry

####################################################################
# configure substitutions and friendly name
####################################################################

  friendly_name: ${area_id}_${device_id}${suffix}

substitutions:
  area_id: G2
  device_id: "GANTRY"
  suffix: ""
  pin_sda: GPIO0
  pin_scl: GPIO1
  pin_fan1_pwm: GPIO3
  pin_fan2_pwm: GPIO4
  pin_trigger: GPIO5
  pin_echo: GPIO6
  #pin_sgp4x_address: "0x59"
  address_sht3xd: "0x44"
  #address_bme680: "0x76"
  #bme680_temp_offset: "2.5"

####################################################################
# generic yaml for humidifiers below
####################################################################
logger:
captive_portal:
wifi:
  !include includes/wifi_default.yaml

globals:
  - id: ${area_id}_${device_id}${suffix}_fan_speed_step
    type: int
    restore_value: no
    initial_value: '0'
  - id: ${area_id}_${device_id}${suffix}_door_open
    type: bool
    restore_value: no
    initial_value: 'false'

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: "${area_id}/${device_id}"
  on_message:
    - topic: ${area_id}/door_switch
      then:
        - lambda: |-
            if (strcmp(x.c_str(), "ON") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open${suffix}) = true;
            } else if (strcmp(x.c_str(), "OFF") == 0) {
              id(${area_id}_${device_id}${suffix}_door_open${suffix}) = false;
            }
            id(update_wind_fan_speed).execute();

output:
  - platform: ledc
    pin: ${pin_fan1_pwm}
    id: ${area_id}_${device_id}${suffix}_fan1_pwm
    frequency: 25000 Hz
    inverted: True

  - platform: ledc
    pin: ${pin_fan2_pwm}
    id: ${area_id}_${device_id}${suffix}_fan2_pwm
    frequency: 25000 Hz
    inverted: True

fan:
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan1_pwm
    name: "Wind"
    id: ${area_id}_${device_id}${suffix}_fan1
  - platform: speed
    output: ${area_id}_${device_id}${suffix}_fan2_pwm
    name: "Wind"
    id: ${area_id}_${device_id}${suffix}_fan2

i2c:
  !include includes/i2c_bus_a.yaml

sensor:
  # physical sensors
  - !include includes/sensor_sht3xd.yaml
  - !include includes/sensor_gantry_ultrasonic.yaml
  # calculated sensors
  - !include includes/sensor_vpd.yaml
  - !include includes/sensor_rh_target.yaml
  - !include includes/sensor_dew_point.yaml
  # mqtt sensors
  - !include includes/sensor_mqtt_vpd_leaf_offset.yaml
  - !include includes/sensor_mqtt_vpd_target.yaml

number:
  - !include includes/number_fan_speed_min.yaml
  - !include includes/number_fan_speed_max.yaml
  - !include includes/number_wind_sweep_duration.yaml
  - !include includes/number_gantry_position_min.yaml
  - !include includes/number_gantry_position_max.yaml

# Cola detection sensor via MQTT as text_sensor
text_sensor:
  - platform: mqtt_subscribe
    name: "Canopy Cola Detected [${area_id}${suffix}]"
    id: ${area_id}_${device_id}${suffix}_cola_detected
    topic: "${area_id}/CANOPY/sensor/cola_detected"

interval:
  - interval: 60s
    then:
      - script.execute: update_wind_fan_speed
  - interval: 60min
    then:
      - script.execute: update_gantry_height

script:
  - !include includes/script_update_wind_fan_speed.yaml

  - id: update_gantry_height
    then:
      - lambda: |-
          ESP_LOGD("debug", "Checking conditions for moving gantry...");
          ESP_LOGD("debug", "Cola detected state: %s", id(${area_id}_cola_detected${suffix}).state.c_str());
          ESP_LOGD("debug", "Gantry position: %.2f, Min Position: %.2f", id(${area_id}_${device_id}_position${suffix}).state, id(${area_id}_${device_id}_position_min${suffix}).state);

          if (id(${area_id}_cola_detected${suffix}).state == "{\"state\": \"true\"}" && id(${area_id}_${device_id}_position${suffix}).state > id(${area_id}_${device_id}_position_min${suffix}).state) {
            ESP_LOGD("main", "Conditions met. Sending MQTT message to move gantry");
            id(${area_id}_publish_gantry_step_up${suffix}).execute();
          } else {
            ESP_LOGD("main", "Conditions not met. Skipping...");
          }

  - id: ${area_id}_publish_gantry_step_up${suffix}
    then:
      - mqtt.publish:
          topic: "${area_id}/LIFT/switch/g2_step_up/set-state"
          payload: "ON"


