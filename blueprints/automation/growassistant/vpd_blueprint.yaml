blueprint:
  name: VPD Control Blueprint
  description: Adjust VPD based on target VPD after a 1-minute delay.
  domain: automation
  input:
    # Cabinet-Specific Entities
    vpd_control_enable:
      name: VPD Control Enable
      selector:
        entity:
          domain: input_boolean

    water_door_switch:
      name: Water Door Switch
      selector:
        entity:
          domain: binary_sensor

    vpd_target:
      name: VPD Target
      selector:
        entity:
          domain: input_number

    vpd_sensor:
      name: VPD Sensor
      selector:
        entity:
          domain: sensor

    intake_temperature_sensor:
      name: Intake Temperature Sensor
      selector:
        entity:
          domain: sensor

    intake_humidity_sensor:
      name: Intake Humidity Sensor
      selector:
        entity:
          domain: sensor

    canopy_temperature_sensor:
      name: Canopy Temperature Sensor
      selector:
        entity:
          domain: sensor

    canopy_humidity_sensor:
      name: Canopy Humidity Sensor
      selector:
        entity:
          domain: sensor

    rh_target_sensor:
      name: RH Target Sensor
      selector:
        entity:
          domain: sensor

    dayphase_sensor:
      name: Dayphase Sensor
      selector:
        entity:
          domain: sensor

    temperature_offset_max_day:
      name: Temperature Offset Max Day
      selector:
        entity:
          domain: input_number

    temperature_offset_max_night:
      name: Temperature Offset Max Night
      selector:
        entity:
          domain: input_number

    previous_d_canopy_target:
      name: Previous d_canopy_target
      selector:
        entity:
          domain: input_number

    intake_fan:
      name: Intake Fan
      selector:
        entity:
          domain: fan

    exhaust_fan_1:
      name: Exhaust Fan 1
      selector:
        entity:
          domain: fan

    exhaust_fan_2:
      name: Exhaust Fan 2
      selector:
        entity:
          domain: fan

    humidifier_fan:
      name: Humidifier Fan
      selector:
        entity:
          domain: fan

    intake_fan_speed_min:
      name: Intake Fan Speed Min
      selector:
        entity:
          domain: input_number

    intake_fan_speed_max:
      name: Intake Fan Speed Max
      selector:
        entity:
          domain: input_number

    exhaust_fan_speed_min:
      name: Exhaust Fan Speed Min
      selector:
        entity:
          domain: input_number

    exhaust_fan_speed_max:
      name: Exhaust Fan Speed Max
      selector:
        entity:
          domain: input_number

    integral_intake:
      name: Integral Intake
      selector:
        entity:
          domain: input_number

    integral_exhaust:
      name: Integral Exhaust
      selector:
        entity:
          domain: input_number

    control_intake:
      name: Control Intake
      selector:
        entity:
          domain: input_number

    control_exhaust:
      name: Control Exhaust
      selector:
        entity:
          domain: input_number

    # Global Entities (Default Values Provided)
    global_enable:
      name: Global Enable
      selector:
        entity:
          domain: input_boolean

    service_mode_enable:
      name: Service Mode
      selector:
        entity:
          domain: input_boolean

    kp_vpd:
      name: Kp VPD
      selector:
        entity:
          domain: input_number

    ki_vpd:
      name: Ki VPD
      selector:
        entity:
          domain: input_number

    kd_vpd:
      name: Kd VPD
      selector:
        entity:
          domain: input_number

    dt_vpd:
      name: dt VPD
      selector:
        entity:
          domain: input_number

trigger:
  - platform: time_pattern
    minutes: '/1'
    seconds: '00'

condition:
  - condition: state
    entity_id: !input vpd_control_enable
    state: 'on'
  - condition: state
    entity_id: !input global_enable
    state: 'on'
  - condition: state
    entity_id: !input service_mode_enable
    state: 'off'
  - condition: state
    entity_id: !input water_door_switch
    state: 'off'

action:
  - variables:
      vpd_target: "{{ states(input.vpd_target) | float }}"
      canopy_vpd: "{{ states(input.vpd_sensor) | float }}"
      intake_temp: "{{ states(input.intake_temperature_sensor) | float }}"
      intake_hum: "{{ states(input.intake_humidity_sensor) | float }}"
      canopy_temp: "{{ states(input.canopy_temperature_sensor) | float }}"
      canopy_hum: "{{ states(input.canopy_humidity_sensor) | float }}"
      rh_target: "{{ states(input.rh_target_sensor) | float }}"
      dayphase: "{{ states(input.dayphase_sensor) | int }}"
      temperature_offset_max_day: "{{ states(input.temperature_offset_max_day) | float }}"
      temperature_offset_max_night: "{{ states(input.temperature_offset_max_night) | float }}"
      Kp: "{{ states(input.kp_vpd) | float(0) }}"
      Ki: "{{ states(input.ki_vpd) | float(0) }}"
      Kd: "{{ states(input.kd_vpd) | float(0) }}"
      dt: "{{ states(input.dt_vpd) | float(0) }}"
      previous_error: "{{ states(input.previous_d_canopy_target) | float(0) }}"
      intake_fan_speed: "{{ (state_attr(input.intake_fan, 'percentage') | float(0)) / 100 }}"
      exhaust_fan_1_speed: "{{ (state_attr(input.exhaust_fan_1, 'percentage') | float(0)) / 100 }}"
      exhaust_fan_2_speed: "{{ (state_attr(input.exhaust_fan_2, 'percentage') | float(0)) / 100 }}"
      humidifier_dutycycle: "{{ state_attr(input.humidifier_fan, 'percentage') | float(0) }}"

      # Fan speed limits
      intake_fan_min: "{{ states(input.intake_fan_speed_min) | float }}"
      intake_fan_max: "{{ states(input.intake_fan_speed_max) | float }}"
      exhaust_fan_min: "{{ states(input.exhaust_fan_speed_min) | float }}"
      exhaust_fan_max: "{{ states(input.exhaust_fan_speed_max) | float }}"

      # Control logic calculations
      d_canopy_target: "{{ canopy_vpd - vpd_target }}"
      P_intake: "{{ (Kp * d_canopy_target) | abs }}"
      P_exhaust: "{{ (Kp * d_canopy_target) | abs }}"
      integral_intake: "{{ (states(input.integral_intake) | float(0) + (d_canopy_target * dt)) | abs }}"
      integral_exhaust: "{{ (states(input.integral_exhaust) | float(0) + (d_canopy_target * dt)) | abs }}"
      integral_limit: 0.05
      integral_intake_clamped: "{{ [integral_limit, integral_intake] | min }}"
      integral_exhaust_clamped: "{{ [integral_limit, integral_exhaust] | min }}"
      D_intake: "{{ (Kd * (d_canopy_target - previous_error) / dt) | abs }}"
      D_exhaust: "{{ (Kd * (d_canopy_target - previous_error) / dt) | abs }}"
      control_intake: "{{ (P_intake + Ki * integral_intake_clamped + D_intake) | abs }}"
      control_exhaust: "{{ (P_exhaust + Ki * integral_exhaust_clamped + D_exhaust) | abs }}"

      min_temp: 15
      max_temp: "{{ intake_temp + (temperature_offset_max_night if dayphase == 0 else temperature_offset_max_day) }}"
      t_margin: "{{ max_temp - canopy_temp }}"
      t_potential: "{{ canopy_temp - intake_temp }}"
      rh_margin: "{{ rh_target - canopy_hum }}"
      rh_potential: "{{ canopy_hum - intake_hum }}"

  # Update Control Values
  - service: input_number.set_value
    data:
      entity_id: "{{ input.control_intake }}"
      value: "{{ control_intake }}"
  - service: input_number.set_value
    data:
      entity_id: "{{ input.control_exhaust }}"
      value: "{{ control_exhaust }}"

  # Update Previous Error Value
  - service: input_number.set_value
    data:
      entity_id: "{{ input.previous_d_canopy_target }}"
      value: "{{ d_canopy_target }}"

  # Update Integral Terms
  - service: input_number.set_value
    data:
      entity_id: "{{ input.integral_intake }}"
      value: "{{ integral_intake_clamped }}"
  - service: input_number.set_value
    data:
      entity_id: "{{ input.integral_exhaust }}"
      value: "{{ integral_exhaust_clamped }}"

  # Control Logic
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ d_canopy_target > 0 }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin > 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.humidifier_fan }}"
                    data:
                      percentage: "{{ [humidifier_dutycycle + 1, 100] | min }}"
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin <= 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.humidifier_fan }}"
                    data:
                      percentage: "{{ [humidifier_dutycycle - 2, 0] | max }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ t_margin < 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.intake_fan }}"
                    data:
                      percentage: "{{ [ [(intake_fan_speed + control_intake) * 100, intake_fan_max ] | min, intake_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_1 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_1_speed + control_exhaust) * 100, exhaust_fan_max ] | min, exhaust_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_2 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_2_speed + control_exhaust) * 100, exhaust_fan_max ] | min, exhaust_fan_min ] | max }}"
              - conditions:
                  - condition: template
                    value_template: "{{ t_margin >= 0 and rh_margin > 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.intake_fan }}"
                    data:
                      percentage: "{{ [ [(intake_fan_speed - control_intake) * 100, intake_fan_min ] | max, intake_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_1 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_1_speed - control_exhaust) * 100, exhaust_fan_min ] | max, exhaust_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_2 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_2_speed - control_exhaust) * 100, exhaust_fan_min ] | max, exhaust_fan_max ] | min }}"
      - conditions:
          - condition: template
            value_template: "{{ d_canopy_target <= 0 }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin < 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.humidifier_fan }}"
                    data:
                      percentage: "{{ [humidifier_dutycycle - 2, 0] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.intake_fan }}"
                    data:
                      percentage: "{{ [ [(intake_fan_speed + control_intake) * 100, intake_fan_max ] | min, intake_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_1 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_1_speed + control_exhaust) * 100, exhaust_fan_max ] | min, exhaust_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: "{{ input.exhaust_fan_2 }}"
                    data:
                      percentage: "{{ [ [(exhaust_fan_2_speed + control_exhaust) * 100, exhaust_fan_max ] | min, exhaust_fan_min ] | max }}"
