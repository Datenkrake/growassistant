# This automation control the light intensity of the grow light (DLI) based on the DLI setpoint
# All light intensity values are in percentage and changed equally
# The light intensity is adjusted every minute based on the DLI setpoint and the current DLI
# The new setpoint is calculated using a PID controller

alias: Light Intensity Control
id: 'automations_light_intensity'
description: 'This automation adjusts the light intensity based on the DLI setpoint'
trigger:
  - platform: time_pattern
    seconds: "/30"
condition:
  - condition: state
    entity_id: input_boolean.g1_global_enable
    state: 'on'
  - condition: state
    entity_id: input_boolean.g1_light_intensity_control_enable
    state: 'on'
  - condition: state
    entity_id: input_boolean.g1_service_mode_enable
    state: 'off'

action:
  - variables:
      light_intensity_max: "{{ states('input_number.g1_light_intensity_max') | float(0) }}"
      dli_target: "{{ states('sensor.g1_dli_target') | float(0) }}"
      dli_current: "{{ states('sensor.g1_dli') | float(0) }}"
      previous_error: "{{ states('input_number.g1_previous_dli_error') | float(0) }}"
      Kp: "{{ states('input_number.g1_p_dli') | float(0) }}"
      Ki: "{{ states('input_number.g1_i_dli') | float(0) }}"
      Kd: "{{ states('input_number.g1_Kd_dli') | float(0) }}"
      dt: "{{ states('input_number.g1_dt_dli') | float(0) }}"
      
      # Calculate the difference between current and target DLI
      d_dli_target: "{{ dli_current - dli_target }}"

      # Integral term (accumulating error over time)
      integral: "{{ states('input_number.g1_integral_dli') | float(0) + (d_dli_target * dt) }}"

      # Derivative term (rate of change of error)
      derivative: "{{ Kd * (d_dli_target - previous_error) / dt }}"

      # The overall control calculation, without abs to allow for both increases and decreases
      control: "{{ Kp * d_dli_target + Ki * integral + derivative }}"

      # Current light intensity as a float between 0 and 1
      light_intensity: "{{ (state_attr('light.g1_canopy_light', 'brightness') | float(0)) / 255 }}"

      # Calculate the new light intensity, ensuring it remains within bounds
      light_intensity_new: >
        {% set new_intensity = light_intensity - control %}
        {% if new_intensity > light_intensity_max %}
          {{ (light_intensity_max * 255) | int }}
        {% elif new_intensity < 0 %}
          {{ 0 }}
        {% else %}
          {{ (new_intensity * 255) | int }}
        {% endif %}

      # State of the door and handling when it's open
      door_state: "{{ states('binary_sensor.g1_water_door_switch') }}"
      light_intensity_door_open: "{{ states('input_number.g1_light_intensity_door_open') | int }}"

      dayphase_target: "{{ states('sensor.g1_dayphase_target') | int }}"

      # Final light intensity, accounting for the door state
      final_light_intensity: >
        {% if dayphase_target == 1 %}
          {% if door_state == 'on' %}
            {{ light_intensity_door_open }}
          {% else %}
            {{ light_intensity_new }}
          {% endif %}
        {% else %}
          {{ 0 }}
        {% endif %}
      
      # if light intensity is 0, call light.turn_off
      # if light intensity is not 0, call light.turn_on
  - choose:
    - conditions:
        condition: template
        value_template: "{{ final_light_intensity == 0 }}"
      sequence:
        - service: light.turn_off
          target:
            entity_id: light.g1_qbar1_pwm_qbar1
        - service: light.turn_off
          target:
            entity_id: light.g1_qbar2_pwm_qbar2
    - conditions:
        condition: template
        value_template: "{{ final_light_intensity != 0 }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: light.g1_qbar1_pwm_qbar1
          data:
            brightness: "{{ final_light_intensity }}"
        - service: light.turn_on
          target:
            entity_id: light.g1_qbar2_pwm_qbar2
          data:
            brightness: "{{ final_light_intensity }}"
  - service: input_number.set_value
    data:
      entity_id: input_number.g1_previous_dli_error
      value: "{{ d_dli_target }}"
  - service: input_number.set_value
    data:
      entity_id: input_number.g1_integral_dli
      value: "{{ [100, [-100, integral] | max] | min }}"



