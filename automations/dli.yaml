alias: Light Intensity Control
id: 'automations_light_intensity'
description: 'This automation adjusts the light intensity based on the DLI setpoint'
trigger:
  - platform: time_pattern
    seconds: 30
condition:
  - condition: state
    entity_id: input_boolean.g1_global_enable
    state: 'on'
  - condition: state
    entity_id: input_boolean.g1_light_intensity_control_enable
    state: 'on'
  - condition: state
    entity_id: input_boolean.g1_service_mode_enable
    state: 'off'

action:
  - variables:
      light_intensity_max: >
        {% set value = states('input_number.g1_light_intensity_max') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      dli_target: >
        {% set value = states('sensor.g1_dli_target') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      dli_current: >
        {% set value = states('sensor.g1_dli') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      previous_error: >
        {% set value = states('input_number.g1_previous_dli_error') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      Kp: >
        {% set value = states('input_number.g1_kp_dli') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      Ki: >
        {% set value = states('input_number.g1_ki_dli') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      Kd: >
        {% set value = states('input_number.g1_Kd_dli') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      dt: >
        {% set value = states('input_number.g1_dt_dli') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | float }}

      # Calculate the difference between current and target DLI
      d_dli_target: "{{ (dli_current | float(0)) - (dli_target | float(0)) }}"

      # Integral term (accumulating error over time)
      integral: >
        {{ (states('input_number.g1_integral_dli') | float(0)) + ((d_dli_target | float(0)) * (dt | float(0))) }}

      # Derivative term (rate of change of error)
      derivative: "{{ (Kd | float(0)) * ((d_dli_target | float(0)) - (previous_error | float(0))) / (dt | float(0)) }}"

      # The overall control calculation, without abs to allow for both increases and decreases
      control: "{{ (Kp | float(0)) * (d_dli_target | float(0)) + (Ki | float(0)) * (integral | float(0)) + (derivative | float(0)) }}"

      # Current light intensity as a float between 0 and 1
      light_intensity: "{{ (state_attr('light.g1_canopy_light', 'brightness') | float(0)) / 255 }}"

      # Calculate the new light intensity, ensuring it remains within bounds
      light_intensity_new: >
        {% set new_intensity = (light_intensity | float(0)) - (control | float(0)) %}
        {% if new_intensity > (light_intensity_max | float(0)) %}
          {{ (light_intensity_max * 255) | int }}
        {% elif new_intensity < 0 %}
          {{ 0 }}
        {% else %}
          {{ (new_intensity * 255) | int }}
        {% endif %}

      # State of the door and handling when it's open
      door_state: "{{ states('binary_sensor.g1_water_door_switch') }}"

      light_intensity_door_open: >
        {% set value = states('input_number.g1_light_intensity_door_open') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | int }}

      dayphase_target: >
        {% set value = states('sensor.g1_dayphase_target') %}
        {{ value if value != 'unknown' and value != 'unavailable' else 0 | int }}

      # Final light intensity, accounting for the door state
      final_light_intensity: >
        {% if dayphase_target == 1 %}
          {% if door_state == 'on' %}
            {{ light_intensity_door_open }}
          {% else %}
            {{ light_intensity_new }}
          {% endif %}
        {% else %}
          {{ 0 }}
        {% endif %}

  - choose:
      - conditions:
          condition: template
          value_template: "{{ final_light_intensity == 0 }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: light.g1_qbar1_pwm_qbar1
          - service: light.turn_off
            target:
              entity_id: light.g1_qbar2_pwm_qbar2
      - conditions:
          condition: template
          value_template: "{{ final_light_intensity != 0 }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: light.g1_qbar1_pwm_qbar1
            data:
              brightness: "{{ final_light_intensity }}"
          - service: light.turn_on
            target:
              entity_id: light.g1_qbar2_pwm_qbar2
            data:
              brightness: "{{ final_light_intensity }}"

  - service: input_number.set_value
    data:
      entity_id: input_number.g1_previous_dli_error
      value: "{{ d_dli_target }}"

  - service: input_number.set_value
    data:
      entity_id: input_number.g1_integral_dli
      value: "{{ [100, [-100, integral] | max] | min }}"
