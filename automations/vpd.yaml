alias: "VPD Control Automation"
id: "automations_vpd"
description: "Adjust VPD based on target VPD after a 1-minute delay."
trigger:
  - platform: time_pattern
    minutes: "/1"
    seconds: 00
condition:
  - condition: state
    entity_id: input_boolean.vpd_control_enable
    state: "on"
  - condition: state
    entity_id: input_boolean.global_enable
    state: "on"
  - condition: state
    entity_id: input_boolean.service_mode
    state: "off"
  - condition: state
    entity_id: binary_sensor.g1_water_door_switch
    state: "off"
action:
  - variables:
      target_vpd: "{{ states('input_number.target_vpd') | float }}"
      canopy_vpd: "{{ states('sensor.vpd') | float }}"
      intake_temp: "{{ states('sensor.g1_intake_bme680_temperature') | float }}"
      intake_hum: "{{ states('sensor.g1_intake_bme680_humidity') | float }}"
      canopy_temp: "{{ states('sensor.combined_temperature') | float }}"
      canopy_hum: "{{ states('sensor.combined_humidity') | float }}"
      rh_target: "{{ states('sensor.rh_target') | float }}"
      dayphase: "{{ states('sensor.dayphase') | int }}"
      Kp: 1
      Ki: 0.1
      Kd: 0.01
      dt: 0.01
      d_canopy_target: "{{ canopy_vpd - target_vpd }}"
      previous_error: "{{ states('input_number.previous_d_canopy_target') | float(0) }}"
      intake_fan_speed: "{{ (state_attr('fan.g1_intake_intake_fan', 'percentage') | float(0)) / 100 }}"
      exhaust_fan_1_speed: "{{ (state_attr('fan.g1_exhaust_exhaust_fan_1', 'percentage') | float(0)) / 100 }}"
      exhaust_fan_2_speed: "{{ (state_attr('fan.g1_exhaust_exhaust_fan_2', 'percentage') | float(0)) / 100 }}"
      humidifier_dutycycle: "{{ (state_attr('fan.g1_humidifier_humidifier', 'percentage') | float(0)) }}"

      # Fan speed limits from input_numbers
      intake_fan_min: "{{ states('input_number.intake_fan_speed_min') | float }}"
      intake_fan_max: "{{ states('input_number.intake_fan_speed_max') | float }}"
      exhaust_fan_min: "{{ states('input_number.exhaust_fan_speed_min') | float }}"
      exhaust_fan_max: "{{ states('input_number.exhaust_fan_speed_max') | float }}"

      # Control logic calculations
      P_intake: "{{ Kp * d_canopy_target }}"
      P_exhaust: "{{ Kp * d_canopy_target }}"
      integral_intake: "{{ states('input_number.integral_intake') | float(0) + (d_canopy_target * dt) }}"
      integral_exhaust: "{{ states('input_number.integral_exhaust') | float(0) + (d_canopy_target * dt) }}"
      integral_limit: 0.05
      integral_intake_clamped: "{{ [integral_limit, integral_intake] | min }}"
      integral_exhaust_clamped: "{{ [integral_limit, integral_exhaust] | min }}"
      D_intake: "{{ Kd * (d_canopy_target - previous_error) / dt }}"
      D_exhaust: "{{ Kd * (d_canopy_target - previous_error) / dt }}"
      control_intake: "{{ P_intake + Ki * integral_intake_clamped + D_intake }}"
      control_exhaust: "{{ P_exhaust + Ki * integral_exhaust_clamped + D_exhaust }}"
      min_temp: 15
      max_temp: "{{ intake_temp + (1 if dayphase == 0 else 5) }}"
      t_margin: "{{ max_temp - canopy_temp }}"
      t_potential: "{{ canopy_temp - intake_temp }}"
      rh_margin: "{{ rh_target - canopy_hum }}"
      rh_potential: "{{ canopy_hum - intake_hum }}"

  # Update previous error value for next cycle
  - service: input_number.set_value
    data:
      entity_id: input_number.previous_d_canopy_target
      value: "{{ d_canopy_target }}"

  # Update integral terms
  - service: input_number.set_value
    data:
      entity_id: input_number.integral_intake
      value: "{{ integral_intake_clamped }}"
  - service: input_number.set_value
    data:
      entity_id: input_number.integral_exhaust
      value: "{{ integral_exhaust_clamped }}"

  # Control logic
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ d_canopy_target > 0 }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin > 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_humidifier_humidifier
                    data:
                      percentage: "{{ [humidifier_dutycycle + 1, 100] | min }}"
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin <= 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_humidifier_humidifier
                    data:
                      percentage: "{{ [humidifier_dutycycle - 2, 0] | max }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ t_margin < 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_intake_intake_fan
                    data:
                      percentage: "{{ [ (intake_fan_speed + control_intake) * 100, intake_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_1
                    data:
                      percentage: "{{ [ (exhaust_fan_1_speed + control_exhaust) * 100, exhaust_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_2
                    data:
                      percentage: "{{ [ (exhaust_fan_2_speed + control_exhaust) * 100, exhaust_fan_max ] | min }}"
              - conditions:
                  - condition: template
                    value_template: "{{ t_margin >= 0 and rh_margin > 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_intake_intake_fan
                    data:
                      percentage: "{{ [ (intake_fan_speed - control_intake) * 100, intake_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_1
                    data:
                      percentage: "{{ [ (exhaust_fan_1_speed - control_exhaust) * 100, exhaust_fan_min ] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_2
                    data:
                      percentage: "{{ [ (exhaust_fan_2_speed - control_exhaust) * 100, exhaust_fan_min ] | max }}"
      - conditions:
          - condition: template
            value_template: "{{ d_canopy_target <= 0 }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ rh_margin < 0 }}"
                sequence:
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_humidifier_humidifier
                    data:
                      percentage: "{{ [humidifier_dutycycle - 2, 0] | max }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_intake_intake_fan
                    data:
                      percentage: "{{ [ (intake_fan_speed + control_intake) * 100, intake_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_1
                    data:
                      percentage: "{{ [ (exhaust_fan_1_speed + control_exhaust) * 100, exhaust_fan_max ] | min }}"
                  - service: fan.set_percentage
                    target:
                      entity_id: fan.g1_exhaust_exhaust_fan_2
                    data:
                      percentage: "{{ [ (exhaust_fan_2_speed + control_exhaust) * 100, exhaust_fan_max ] | min }}"
